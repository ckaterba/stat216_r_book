[["index.html", "R and RStudio for STAT216 Chapter 1 About 1.1 Organization 1.2 Getting started 1.3 Code in this book 1.4 Help 1.5 Debugging 1.6 Other resources", " R and RStudio for STAT216 Charles Katerba Last update: 2022-09-08 Chapter 1 About This ‘book’ is intended to be a quick and dirty introduction to R (a statistical programming language) and RStudio (an integrated development environment, or IDE, for R) for students in the introductory statistics class at Flathead Valley Community College. This book aims to introduce you to all of the features you’ll need to use in R to be successful in the course. Moreover, we hope that it will help you develop the tools you need to use R in your future endeavors. This book is by no means a complete guide to everything one can do in R, but the aim is to cut down on content and theory in the name of practicality. This class will provide many students with their first interaction with computer programming. The coding required is not extensive and the coding-based activities are heavily scaffolded. The point of including R in this course is not to introduce another layer of difficulty; the opposite is true in fact! The goal is to give you a glimpse at how programming can make your life easier, at least when it comes to statistics and data science. In the process, you will hopefully add another useful and practical tool to your tool belt. Computers are not exiting our lives any time soon and being somewhat familiar with a little programming will only be an advantage. Some might say such familiarity will become essential. 1.1 Organization The chapters of this book will be organized to follow the flow of STAT216 so that reading the book sequentially teaches you the tools as you need them in class. This book will almost certainly be a work in progress, so if there’s something that you’d like to see or if you think something is missing, don’t hesitate to reach out to the author (or your instructor if they are different people). 1.2 Getting started The programming language R is somewhat old, appearing first in 1993. That said, it is still quite useful and will remain so for a long time coming since it is an open-source programming language and software environment. This means that the development and maintenance of the language and software are in the hands of all users, not just a small, select group of developers. Fear not! You will not have to do any developing. For our purposes, the open-source nature of R implies that the community of users will continue to grow the features and power of the language to meet the needs of the times. There are two mains ways to use R: through a cloud computing service or through an installation directly to your computer. The easiest way to start is through a cloud computing service. In both cases, we recommend you use the IDE RStudio as it makes using R more intuitive and straightforward. Below we describe how to use RStudio on the cloud and on your own computer. RStudio (which will rebrand as Posit in October 2022) hosts its own cloud computing service called RStudio Cloud. To get started: Click the previous link to access their website. Create a new account, for free. Your free account gives 25 project hours per month. This should be enough for your work in STAT216, but there’s a chance you’ll need more. There is a small fee in this case. Click “Start a new project” in the top right corner of your browser. This will open an RStudio session for you. Change the name of your project to something evocative to tell your future self what you were working on. Some ideas: STAT216 HW, STAT216 Activities, etc. You are now ready to rip! You can also download a desktop version of RStudio. Accessing R in this way is slightly more involved, but offers more flexibility and no computational limitations. It is also free. To install R to your own computer: First, you must install R. This link takes you to CRAN, the Comprehensive R Archive Network, where you can download the latest version of R. Be sure to select the download appropriate to your operating system and follow the instructions provided at the link above. Next, download and install RStudio Desktop following the directions at the link. Again, be sure to select the download appropriate to your operating sytem. You can now open RStudio by finding the application on your computer. You, too, are now ready to rip! No matter what version of RStudio you are using, you should now see a window that looks something like this on your computer. An RStudio terminal. Before proceeding, notice that your RStudio session has 3 windows open. The console: this is the most interactive window in your session. You can run quick calculations here. For example, type 2 + 2 then hit enter. Files/plots window: The files tab shows all of the files present in your current working directory. We don’t need to talk much about file management here and will cover it as needed in the future. When you make quick plots, they will appear under the plot tab. For example, evaluating plot(rnorm(10), rnorm(10)) in the console will produce a plot similar to the one above in the Plots panel. This little bit of code generates 2 collections of 10 random numbers and makes a scatter plot of the results. Environment window: This window displays the names of the objects you have stored in your computer’s memory. As an example, if you evaluate x &lt;- rnorm(10), you will see the value x appear in the Environment tab. It is good to check the values you have stored when you’re running into problems with your code. At this point, you can skim the rest of this chapter or move on to RStudio basics. 1.3 Code in this book You should be able to copy and paste all code chunks in this book into your own RStudio terminal and reproduce the results you see in the book. All data used in this book will be sourced from base R, other commonly used packages, or appropriate links will be given for downloaded data sets. The author will endeavor to be clear about what packages are loaded and where data sets are coming from throughout the book. 1.4 Help There are many avenues for finding help using R. Your instructor, the STEM tutoring center, and the internet are great places to start. For the latter, you have to carefully phrase what you’re asking, but if you do so, you can usually find great results with some clear examples. R also has a lot of built in help documentation. You can access this documentation using a ? before the name of the function/object that you’re intereted in. For example, R has a function called prop.test(...) that we’ll learn how to use in this class. To see R’s documententation for prop.test(...), simply run ?prop.test in the console. The examples are usually helpful, but sometimes can create more confusion. In any case, this is a great place to start when you feel confused about a particular function or object. If you bring up the documentation for an in-built data set, it will describe what the variables of that data set are. For instance, try running ?mtcars in the console 1.5 Debugging In this class, you will very likely come to a point where some code you’ve written will not run. This experience can be very frustrating. Remember, it happens to everyone and it frustrates everyone. Hadley Wickham provides a a detailed guide on how to debug code in this book Advanced R, but here is my take with a few additions. Double and triple check your syntax. New coders are often stymied by small syntax mistakes. For instance, if you want to use a function called f in R, but you type F instead, the machine won’t do the right thing. Similarly, be careful about commas; for example, elements of lists need to be separated by commas and they can be easy to forget. There are a too many syntax errors one can make to list here. Search the internet for the error codes you’re seeing. You can simply copy and paste them into your web browser. Most likely someone before you has made the same mistake and asked the same question. Figure out exactly where the error is. This is harder than it seems like it should be sometimes. In short pieces of code it is usually easy to identify, but when you become more advanced and write longer code the problem can get tricky. Reach out to your instructor and/or the STEM tutoring center at FVCC. These people are invaluable resources. Be sure to not only share the error code, but the entire chunk of code that you think is problematic. Even better, share all of your code. The website CrossValidated is a stack exchange where users can ask and answers questions about statistics, especially R coding. You may be able to get questions answered here, but be warned: the community is very picky about how you ask questions and about the type of questions you ask. 1.6 Other resources As mentioned above, these notes are only going to give you a brief glimpse of R and RStudio. The resources linked below will either provide a much more in-depth look at R and its applications or provide a very quick summary of certain packages and/or features. RStudio cheatsheets. These are invaluable as they provide a lot of information in a small amount of space. A list of helpful R functions. Thomas Scofield made a super consice list of commonly used base R functions and provided examples on how to use them. R for Data Science. As the title suggests, this book focuses more on data science than on statistics, so it spends more time on data visualization, programming, data wrangling, and modeling. Advanced R. This book goes into the more nitty gritty details of programming in R. In writing this book the author has referenced many of the works above along with a collection of other resources. See the bibliography for a somewhat complete list. "],["rstudio-basics.html", "Chapter 2 RStudio basics 2.1 A big calculator 2.2 Naming things 2.3 Lists and vectors 2.4 Packages 2.5 Data frames and tibbles 2.6 R Markdown documents", " Chapter 2 RStudio basics At this point you should have an operational RStudio terminal at your disposal. If not, go back to Getting started. This chapter will focus some of the most basic tools and skills you’ll need to successfully use RStudio. We’ll start with using R as a calculator, learn about naming and storing values/objects, then progress to loading and using data frames (the bread and butter of R in some sense), and finish with R Markdown documents, which allow you to create fully reproducible documents that contain a mixture of text and code. Fun fact: these notes were written in a collection of RMarkdown documents and compiled with a package called bookdown. As you proceed, we encourage you to try to run any code you see in this book and to play around and do things on your own. The best way to learn how to code is to experiment. The immediate feedback of running some successful code can be quite gratifying! 2.1 A big calculator At its most basic, R is a big, fancy, and initially cumbersome calculator. Think of any calculation you’d like to do and R can likely do it. R can handle more than just numbers! For our purposes, we’ll need numbers, strings, and logicals. 2.1.1 Numbers R has three “atomic” types of numbers: real, integer, and complex, but we will only need to think of real numbers. You can do arithmetic and evaluate the standard elementary functions with numbers as you would expect. Addition, multiplication, subtraction, and division are +, *, -, and / respectively. For example: 2 + 2 ## [1] 4 3 * 1.5 ## [1] 4.5 9 - 4 ## [1] 5 5/3 ## [1] 1.666667 Exponentiation is either ^ or **, the latter is old school. You can raise a number to a power of 10 using scientific notation, for example 1.2e4 is 12000. 2^3 ## [1] 8 2**3 ## [1] 8 1.2e4 ## [1] 12000 All of your favorite “elementary” functions are built into R. Note that the log function is base \\(e\\), not base 10. The example below shows how to change base. exp(2) # e^2 ## [1] 7.389056 sin(pi/2) # note the trig functions are in radians ## [1] 1 log(10) # natural log of 10 ## [1] 2.302585 log(100, 10) # the log of 100, base 10 ## [1] 2 Reminder! Be careful and mindful about the order of operations; computers and calculators read your input very literally. For instance, \\(6 \\div 2(1 + 2)\\), is an annoying statement with respect to the order of operations. R will evaluate this expression correctly if you type 6/2*(1+2). Make sure you can evaluate it correctly as well so that you input what you mean. 2.1.2 Strings We want to be able to analyze both numerical and categorical variables in R. For this reason, along with many others, your can use and manipulate strings of character in R. We won’t be doing much more than using strings for values of categorical variables, so we won’t go into too much detail. To define a string, simply put the expression in question in quotation marks. &quot;R might be cool? I don&#39;t know.&quot; Base R has some handy functions for manipulating strings. We may not need all of them, but they’re good to be aware of. substr(string, start=n1, stop=n2) will return a subset of your string starting at the n1th character, ending at the n2 character. substr(&quot;R might be cool? I don&#39;t know.&quot;, start = 18, stop = 30) ## [1] &quot;I don&#39;t know.&quot; nchar(string) counts the number of characters in a string. nchar(&quot;R might be cool? I don&#39;t know.&quot;) ## [1] 30 toupper/tolower(string) converts all letters to either upper or lower case. toupper(&quot;R might be cool? I don&#39;t know.&quot;) ## [1] &quot;R MIGHT BE COOL? I DON&#39;T KNOW.&quot; paste(..., sep = \" \") will concatenate a collection of strings, separated by a space. You can change what separates the strings. This function is most useful when you have to repeatedly concatenate some strings. paste(&quot;R might be cool? I don&#39;t know.&quot;, &quot;Yes, it is!&quot;) ## [1] &quot;R might be cool? I don&#39;t know. Yes, it is!&quot; You can do a lot more with strings, but things start to get more complicated quickly. The package stringr has some really handy functions, but are unnecessary for this course. 2.1.3 Logicals and Logical operators Throughout this class you will need to compare various objects in R using standard “logical operators” like “equals” (==), “less than” &lt;, “greater than or equal to &gt;=” etc. When you compare objects using these operators, R returns a new type of object called a “logical”. Logicals are just TRUE and FALSE. You can check equality of numbers and strings using ==. To check if two objects are unequal, use !=. 4 == 5 ## [1] FALSE 2^3 == 8 ## [1] TRUE &quot;cat&quot; == &quot;dog&quot; ## [1] FALSE &quot;dog&quot; != &quot;cat&quot; ## [1] TRUE You can compare numbers with your favorite inequalities (&lt;, &gt;, &lt;=, &gt;=) as well. More interestingly, you can also compare strings with inequalities. R defaults to lexicographic (ie dictionary) ordering of strings. 10 &lt; 9 ## [1] FALSE exp(3) &gt;= exp(2) ## [1] TRUE &quot;a&quot; &lt; &quot;b&quot; ## [1] TRUE &quot;aa&quot; &gt; &quot;ab&quot; ## [1] FALSE For convenience, TRUE sometimes behaves like 1 and FALSE like 0. In particular, you can perform arithmetic with logicals. This makes counting the number of matches you have quite easy in some situations, as we’ll see. TRUE + TRUE ## [1] 2 TRUE*FALSE ## [1] 0 Note: R may occasionally exhibit behavior that you find goofy when comparing objects. This is usually because of coercion. When comparing objects, R will try to make the objects into the same type, if possible. We don’t want to get bogged down in these details, but it is something to be aware of. The following example illustrates coercion when trying to compare a string to a number. &quot;1&quot; == 1 #R converts the string to 1, as a number, then compares. ## [1] TRUE &quot;01&quot; == 1 # R leaves the string as is, so the objects are unequal. ## [1] FALSE 2.2 Naming things Now that we know what types of objects we can use in R, we can talk about naming objects and storing them in your computers memory so that you can reference them easily later. You can name objects in two ways, either with the classic &lt;- or with =. These two methods of naming objects technically do different things, but the difference is subtle enough that we won’t worry about it. Note that when you name an object, it will appear in your “Environment” window in RStudio. The example below will illustrates the basics of naming objects. x &lt;- 1.123e6 y &lt;- 5 x ## [1] 1123000 y ## [1] 5 x/y ## [1] 224600 Once you’ve named an object and stored it in memory, you can use its name anywhere else to call the value associated to the name. Read the following only if you’ve had some programming experience. If not, skip to the next section. R makes copies of objects in a different way from, say, Python (and many other languages).The difference lies in deep vs shallow copies. Basically, a deep copy creates an entirely new object in memory, but a shallow copy merely points to the original object’s position in memory. R will actually create a shallow copy until the original object is modified, then it will create a deep copy in order to save on memory. To illustrate this point, if you were to run the following code in Python: x = [1,2,3] y = x #shallow copy created here x.append(5) y it would print [1,2,3,5]. However, the equivalent code in R is x = 1:3 y = x # shallow copy of x created here x &lt;- append(x, 5) #but deep copy of original x created here for y y ## [1] 1 2 3 It’s good to know how R is behaving; deep copies can end up using more memory, but that won’t be an issue in this class with modern computing power. 2.3 Lists and vectors One of the many advantages to using a computer for mathematics, statistics, and data analysis is their ability to store and organize large chunks of information. A list/vector is the most basic way to start organizing data in R. This section will guide you through creating and manipulating lists. 2.3.1 Creating lists The most basic tool for creating a list in R is the function c(..). According to the documentation c(...) “is a generic function which combines its arguments.” All that to say that it is a function that creates a list. Here’s a few examples. You can make lists with any types of data in them. x &lt;- c(1,2,3) y &lt;- c(&quot;cat&quot;, &quot;dog&quot;, &quot;rabbit&quot;) You can combine lists easily with the c(...) function as well, but notice in the example below that something funny happens. z &lt;- c(x, y) z ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;cat&quot; &quot;dog&quot; &quot;rabbit&quot; R coerced the numbers from the list x into characters/strings because y contains strings. This is a subtlety that can sometimes cause headaches. If your lists all contain the same types of objects, you have nothing to worry about. Throughout this course you’ll often want to know how many objects are in a list and most times we don’t want to manually count them. The length function does this for us. The examples above are easy to count by hand, but as a quick check: length(x) ## [1] 3 length(y) ## [1] 3 length(z) ## [1] 6 2.3.2 Subsetting lists After defining a list, sometimes we want to access only certain elements of that list; this is called subsetting. We’ll spend more time on fancier subsetting methods later in this course, but this will get us started with the basics. Technical note: R indexing starts at 1 and not 0, a difference between R and some other programming languages like python. To get started, we’ll create a long list of randomly generated numbers. rando &lt;- runif(1000, min = 0, max = 100) length(rando) ## [1] 1000 This list has 1000 elements in it. We can find the 497th element using rando[497] ## [1] 94.21158 and in general, use listName[number]. We can also easily select ranges of indicies. For instance, suppose we want to know what the first 10 values in our list are. rando[1:10] ## [1] 83.38897 42.83056 3.12944 92.05158 13.08507 52.58448 64.58611 ## [8] 15.45479 89.27678 55.55618 Finally, we can pick out specific elements from our big list using a smaller list of our desired indices. For example, if we wanted the entries number 2,3,5,7,11, and 13 from our list, we could use the following. indicies &lt;- c(2,3,5,7,11,13) rando[indicies] ## [1] 42.83056 3.12944 13.08507 64.58611 54.75253 64.00457 2.3.3 Special lists The last section taught us how to make the most basic type of list. While useful, making lists in this way can be tedious because it requires one to type in all values. Often out in the wild, you will want to create lists that follow specific patterns. For instance: the letters “c” through “p”; a list of the integers from 1 to 100; a list of numbers from -10 to 10, spaced by .01; the letters “d”, “g”, and “z” repeated 1000 times each. It is easy to construct these types of lists in R with minimal typing. Lists of integers: to make a list of sequential integers in R, use the format start : end, for instance 2:5 will return the list 2,3,4,5. x &lt;- -8:12 x ## [1] -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 length(x) ## [1] 21 Lists of sequential numbers that are not integers: The function seq produces sequences of numbers that follow a particular pattern. The general syntax is seq( from = STARTING VALUE, to = ENDING VALUE, by = SPACE BETWEEN ENTRIES) So if we wanted a list of all numbers from -10 to 10, spaced by .01, we’d use foo &lt;- seq(from = -10, to = 10, by = .01) We can access the first 5 elements of this list and count the number of elements in our list foo with the following. foo[1:5] ## [1] -10.00 -9.99 -9.98 -9.97 -9.96 length(foo) ## [1] 2001 Lists of sequential letters: R has two in-built lists of letters called letters and LETTERS. No surprise, one of them is a list of lower case letters, the other upper case. letters ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; ## [18] &quot;r&quot; &quot;s&quot; &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; To select the 4th through 11th lowercase letters of the alphabet, use the following syntax (which will be explained in a subsequent section). letters[4:11] ## [1] &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; Lists with a repeating patterns: 2.3.4 List arithmetic 2.4 Packages 2.5 Data frames and tibbles 2.5.1 Whats the difference? 2.5.2 Using data frames/tibbles 2.5.3 Creating data frames/tibbles 2.5.3.1 Manual entry 2.5.3.2 Reading files 2.6 R Markdown documents "],["cross.html", "Chapter 3 Summary statistics and data visualization 3.1 Summary statistics in R 3.2 Data visualization", " Chapter 3 Summary statistics and data visualization TODO 3.1 Summary statistics in R 3.2 Data visualization There are three main ways to create plots in R: base R, lattice, and ggplot2. We will only learn about base R and ggplot2 in this course. In practice, I use base R to make graphs quickly to get an idea of what’s going on and ggplot2 to make more visually appealing and complicated graphics. 3.2.1 Base R 3.2.2 ggplot2 "],["wrangling-data.html", "Chapter 4 Wrangling data", " Chapter 4 Wrangling data TODO "],["distribution-calculations.html", "Chapter 5 Distribution calculations", " Chapter 5 Distribution calculations TO DO: describe how to make distribution calcs "],["inferential-statistics-take-1.html", "Chapter 6 Inferential statistics, take 1", " Chapter 6 Inferential statistics, take 1 TO DO: basically calculations “by hand” "],["inferential-statistics-take-2.html", "Chapter 7 Inferential statistics, take 2 7.1 Analyzing categorical variables 7.2 Analyzing numerical variables", " Chapter 7 Inferential statistics, take 2 TO DO: hypothesis testing and confidence intervals using in-built functions in R. 7.1 Analyzing categorical variables 7.1.1 Single sample 7.1.2 Two sample 7.1.3 Chi-squared goodness of fit test 7.1.4 Chi-squared test of independence 7.2 Analyzing numerical variables 7.2.1 Single sample mean 7.2.2 Two sample mean 7.2.3 Paired data 7.2.4 Analysis of variance (ANOVA) "],["references.html", "References", " References "],["modeling-relationships.html", "Chapter 8 Modeling relationships 8.1 Simple linear regression 8.2 Multiple linear regression 8.3 Bonus topic: logistic regression", " Chapter 8 Modeling relationships To do 8.1 Simple linear regression 8.2 Multiple linear regression 8.3 Bonus topic: logistic regression "]]
