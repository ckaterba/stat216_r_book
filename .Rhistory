)  $%>%
gss2010 %>%
filter( !is.na(grass) ) %>% #selects all rows where grass is *not* NA
group_by(degree) %>%
summarize( degCount = n(), # special function to count the number in each group
legalCount = sum(grass == "LEGAL" ),
legalProp = legalCount / degCount
)  %>%
arrange(desc(legalProp))
bookdown::render_book()
?pchisq
3/12
3/12
val <- c(1,2,5,0)
prob <- c(3/12, 2/12, 1/12, 6/12)
exp_val <- sum(val*prob)
exp_val
varX <- sum(prob*(val - exp_val)^2)
varX
sdX <- sqrt(varX)
sdX
qbinom(.5, 10, .6)
qbinom(.5, 11, .6)
?qbinom
bookdown::render_book()
bf <- tibble(k = 0:15,
"P(X=k)" = dbinom(k, 15, .43))
library(tidyverse)
bf <- tibble(k = 0:15,
"P(X=k)" = dbinom(k, 15, .43))
ggplot(bf, aes(x = k, y = "P(X=k)")) +
geom_bar(color = "black", fill = "steelblue")
ggplot(bf, aes(x = k, y = "P(X=k)")) +
geom_col(color = "black", fill = "steelblue")
bf <- tibble(k = 0:15,
"P(X=k)" = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = "P(X=k)")) +
geom_col(color = "black", fill = "steelblue")
bf <- tibble(k = 0:15,
p = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = "P(X=k)")) +
geom_col(color = "black", fill = "steelblue")
bf <- tibble(k = as.factor(0:15),
p = dbinom(k, 15, .43))
bf <- tibble(k = 0:15,
p = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = "P(X=k)")) +
geom_col(color = "black", fill = "steelblue")
bf <- tibble(k = 0:15,
prob = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue")
bf <- tibble(k = 0:15,
prob = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
ylab("P(X=k)") +
labs(title = "Binomial Prob dist w/ p = .43 and n = 15")
dbinom(4, 15, .43)
pbinom(4, 15, .43)
pbinom(3, 15, .43, lower.tail= FALSE)
#or
1 - pbinom(3, 15, .43)
qbinom(.75, 15, .43)
pbinom(8, 15, .43)
pbinom(7, 15, .43)
bookdown::render_book()
bookdown::render_book()
1 - pbinom(1, 8, .898)
1 - pbinom(0, 8, .898)
choose(4, 1)
library(tidyverse)
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,  #dnorm for normal distribution
geom = "line") + #plot graph of dnorm
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-3, -3)) +
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-3, 1)) +
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,  #dnorm for normal distribution
geom = "line") + #plot graph of dnorm
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-3, 1)) +
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,  #dnorm for normal distribution
geom = "line") + #plot graph of dnorm
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-3, 2)) + #set limits of filling here
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,  #dnorm for normal distribution
geom = "line") + #plot graph of dnorm
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(2,3)) + #set limits of filling here
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,
geom = "line") +
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-3,1)) + #lower tail filling
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(1,3)) + #upper tail filling
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,
geom = "line") +
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-3,-1)) + #lower tail filling
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(1,3)) + #upper tail filling
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,  #dnorm for normal distribution
geom = "line") + #plot graph of dnorm
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(2,3)) + #set limits of filling here
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,
geom = "line") +
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-2,1)) + #set limits of filling here
labs(x = "Z", y = "")
rgeom(5, .2)
rgeom(5, .2)
rgeom(5, .2)
rgeom(5, .2)
gf <- tibble(k = 1:15,
prob = dgeom(k-1,.43))
ggplot(gf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
xlab("k")
ylab("P(X=k)") +
labs(title = "Geometric Prob. dist. w/ p = .43 for k = 1 to 15")
gf <- tibble(k = 1:15,
prob = dgeom(k-1,.43))
ggplot(gf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
xlab("k") +
ylab("P(X=k)") +
labs(title = "Geometric Prob. dist. w/ p = .43 for k = 1 to 15")
dgeom(5, .43)
# or
(1-.43)^5*.43
pgeom(4, .43, lower.tail = FALSE)
# or
1 - (dgeom(0, .43) + dgeom(1, .43) + dgeom(2, .43) + dgeom(3, .43)
+ dgeom(4, .43))
pgeom(4, .43, lower.tail = FALSE) # 1 - P(X <= 5) = P(X >5) = P(X >=6)
# or
1 - (dgeom(0, .43) + dgeom(1, .43) + dgeom(2, .43) + dgeom(3, .43)
+ dgeom(4, .43))
# or
1 - (dgeom(0, .43) + dgeom(1, .43) + dgeom(2, .43) + dgeom(3, .43)
+ dgeom(4, .43))
pgeom(4, .43, lower.tail = FALSE) # 1 - P(X <= 5) = P(X >5) = P(X >=6)
# or
1 - (dgeom(0, .43) + dgeom(1, .43) + dgeom(2, .43) + dgeom(3, .43)
+ dgeom(4, .43))
qgeom(.75, .43)
pgeom(2, .43)
bookdown::render_book()
bookdown::render_book()
bf <- tibble(k = 0:15,
prob = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
xlab("k") +
ylab("P(X=k)") +
labs(title = "Binomial Prob dist w/ p = .43 and n = 15")
bf <- tibble(k = 0:15,
prob = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
xlab("k") +
ylab("P(X=k)") +
labs(title = "Binomial Prob dist w/ p = .43 and n = 15")
bf <- tibble(k = 0:15,
prob = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
xlab("k") +
ylab("P(X=k)") +
labs(title = "Binomial Prob dist w/ p = .43 and n = 15")
bookdown::render_book()
bookdown::render_book()
gf <- tibble(k = 1:15,
prob = dgeom(k-1,.43))
ggplot(gf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
xlab("k") +
ylab("P(X=k)") +
labs(title = "Geometric Prob. dist. w/ p = .43 for k = 1 to 15")
bookdown::render_book()
?bookdown::build_chapter
choose(100000, 1000)
hist(openintro::age_at_mar)
hist(openintro::age_at_mar$age)
hist(openintro::gss2010$hrs1)
?bins
?hist
library(ggplot2)
ggplot( tibble( x = c(-3,3)),
aes(x = x)) +
stat_function(fun = dnorm)
library(tidyverse)
ggplot( tibble( x = c(-3,3)),
aes(x = x)) +
stat_function(fun = dnorm)
ggplot( tibble( x = c(-3,3)),
aes(x = x)) +
stat_function(fun = dnorm) +
xlab("z") +
ylab("")
ggplot( tibble( x = c(-3,3)),
aes(x = x)) +
stat_function(fun = dnorm) +
xlab("z") +
ylab("") +
labs(title = "Prob Density Fun. of Std. Normal Dist.")
openintro::bdims
hist(openintro::bdims$bia_di)
hist(openintro::bdims$bit_di)
library(openintro  )
?bdims
hist(bdims$che_de)
hist(bdims$wri_di)
glimpse(bdims)
hist(bdims$hgt)
hist(subset(bdims, hgt == 1))
hist(subset(bdims, sex == 1)$hgt)
hist(subset(bdims, sex == 0)$hgt)
hist(subset(bdims, sex == 1)$hgt)
maleBdim <- bdims %>%
filter(sex == 1)
ggplot(maleBdim, aes(x = hgt)) +
geom_histogram(bins = 15,
color = "black",
fill = "steelblue")
ggplot(maleBdim, aes(x = hgt)) +
geom_histogram(bins = 10,
color = "black",
fill = "steelblue")
ggplot(maleBdim, aes(x = hgt)) +
geom_histogram(bins = 12,
color = "black",
fill = "steelblue")
ggplot(maleBdim, aes(x = hgt)) +
geom_histogram(bins = 11,
color = "black",
fill = "steelblue")
ggplot(maleBdim, aes(x = hgt)) +
geom_histogram(bins = 11,
color = "black",
fill = "steelblue") +
labs(x = "height (cm)",
title = "Height of active men")
ggplot(maleBdim, aes(x = hgt)) +
geom_histogram(bins = 14,
color = "black",
fill = "steelblue") +
labs(x = "height (cm)",
title = "Height of active men")
m <- mean(maleBdim$hgt)
s <- sd(maleBdim$hgt)
c(m, s)
ggplot(maleBdim, aes(x = hgt)) +
# scales y-axis to a probability density
geom_histogram(y = ..density..,
bins = 14,
color = "black",
fill = "steelblue") +
# adds our normal curve
stat_function(fun = dnorm,
args = list(mean = m,
sd = s),
color = "red")
ggplot(maleBdim, aes(x = hgt)) +
# scales y-axis to a probability density
geom_histogram(y = ..density..,
bins = 14,
color = "black",
fill = "steelblue") +
# adds our normal curve
stat_function(fun = dnorm,
args = list(mean = m,
sd = s),
color = "red") +
labs(x = "height (cm)",
title = "Height of active men")
ggplot(maleBdim, aes(x = hgt)) +
# scales y-axis to a probability density
geom_histogram(aes(y = ..density..),
bins = 14,
color = "black",
fill = "steelblue") +
# adds our normal curve
stat_function(fun = dnorm,
args = list(mean = m,
sd = s),
color = "red") +
labs(x = "height (cm)",
title = "Height of active men")
ggplot(tibble(height = c(165,200)),
aes(x = height)) +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "area",
xlim = c(165, 180),
color = "steelblue") +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "line",
color = "black")
ggplot(tibble(height = c(165,200)),
aes(x = height)) +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "area",
xlim = c(165, 180),
fill = "steelblue") +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "line",
color = "black")
ggplot(tibble(height = c(165,200)),
aes(x = height)) +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "area",
xlim = c(155, 180),
fill = "steelblue") +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "line",
color = "black")
ggplot(tibble(height = c(155,200)),
aes(x = height)) +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "area",
xlim = c(155, 180),
fill = "steelblue") +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "line",
color = "black")
ggplot(tibble(height = c(155,200)),
aes(x = height)) +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "area",
xlim = c(155, 180),
fill = "steelblue") +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "line",
color = "black") +
labs(x = "height (cm)", y = "density"
title = "Height of active men, P(H <= 180")
ggplot(tibble(height = c(155,200)),
aes(x = height)) +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "area",
xlim = c(155, 180),
fill = "steelblue") +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "line",
color = "black") +
labs(x = "height (cm)", y = "density",
title = "Height of active men, P(H <= 180")
ggplot(tibble(height = c(155,200)),
aes(x = height)) +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "area",
xlim = c(155, 180),
fill = "steelblue") +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "line",
color = "black") +
labs(x = "height (cm)", y = "density",
title = "Height of active men, P(H <= 180)")
pnorm(180, mean = m, sd = s)
ggplot(tibble(height = c(155,200)),
aes(x = height)) +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "area",
xlim = c(175, 200),  #define fill region
fill = "steelblue") +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "line",
color = "black") +
labs(x = "height (cm)", y = "density",
title = "Height of active men, P(H >= 175)")
The exact probablity can be calculated as
pnorm(175, mean = m, sd = s, lower.tail = FALSE)
ggplot(tibble(height = c(155,200)),
aes(x = height)) +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "area",
xlim = c(155, 185), #define fill region
fill = "steelblue") +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "line",
color = "black") +
labs(x = "height (cm)", y = "density",
title = "Height of active men, P(H <= 185)")
pnorm(185, mean = m, sd = s)
ggplot(tibble(height = c(155,200)),
aes(x = height)) +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "area",
xlim = c(165, 175),  #define fill region
fill = "steelblue") +
stat_function(
fun = dnorm,
args = list(mean = m,
sd = s),
geom = "line",
color = "black") +
labs(x = "height (cm)", y = "density",
title = "Height of active men, P(165 <= H <= 175)")
pnorm(175, mean = m, sd = s) - pnorm(165, mean = m, sd = s)
qnorm(.8, mean = m, sd = 1)
pnorm(178.587, mean = m, sd = s)
qnorm(.8, mean = m, sd = s)
pnorm(183.7912, mean = m, sd = s)
bookdown::render_book()
1/6
bookdown::render_book()
library(openintro)
openintro::burger
