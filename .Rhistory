?aes
?geom
?geom_point
?geom_hist
?geom_histogram
ggplot(teacher, aes(x = base)) +
geom_histogram()
ggplot(teacher, aes(x = base)) +
geom_histogram(bins = 15)
ggplot(teacher, aes(x = base)) +
geom_histogram(bins = 10)
ggplot(teacher, aes(x = base)) +
geom_histogram(bins = 15)
ggplot(teacher, aes(x = base)) +
geom_histogram(bins = 15, color = "steelblue")
ggplot(teacher, aes(x = base)) +
geom_histogram(bins = 15, fill = "steelblue")
ggplot(teacher, aes(x = base)) +
geom_histogram(bins = 15, fill = "steelblue", color = "black")
ggplot(teacher, aes(x = base)) +
geom_histogram(bins = 15, fill = "steelblue", color = "black") +
labs( title = "Distribution of MI teacher base salary")
?labs
ggplot(teacher, aes(x = base)) +
geom_histogram(bins = 15, fill = "steelblue", color = "black") +
labs( title = "Distribution of MI teacher base salary",
xlab = "Base salary (USD)",
ylab = "Count")
ggplot(teacher, aes(x = base)) +
geom_histogram(bins = 15, fill = "steelblue", color = "black") +
labs( title = "Distribution of MI teacher base salary") +
xlab("Base salary (USD)")
# open empty plot
ggplot(teacher, aes(x = base)) +
# add histogram layer with 15 bins. fill changes bar color, but color changes outline color
geom_histogram(bins = 15, fill = "steelblue", color = "black") +
# adds label layer with only a title. can add subtitle and caption.
labs( title = "Distribution of MI teacher base salary") +
# changes x-axis label
xlab("Base salary (USD)")
?geom_point
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "red")
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "rust")
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "orange", alpha = .5)
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "steelblue", alpha = .5)
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "steelblue", alpha = .5m, shape = 1)
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "steelblue", alpha = .5, shape = 1)
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "steelblue", alpha = .5, shape = 2)
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "steelblue", alpha = .5, shape = 3)
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "steelblue", alpha = .5, shape = 3)
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "steelblue", alpha = .5, shape = 5)
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "steelblue", alpha = .5) +
labs(title = "Teacher salary vs years experience") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "steelblue", alpha = .75) +
labs(title = "Teacher salary vs years experience") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "steelblue", alpha = .5) +
labs(title = "Teacher salary vs years experience") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
ggplot(teacher, aes(x = years, y = total, color = degree))  +
geom_point() +
labs(title = "Teacher salary vs years experience") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
ggplot(teacher, aes(x = years, y = total, color = degree))  +
geom_point(shape = factor(fte)) +
labs(title = "Teacher salary vs years experience, by highest degree") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
ggplot(teacher, aes(x = years, y = total, color = degree))  +
geom_point(aes(shape = factor(fte)) +
labs(title = "Teacher salary vs years experience, by highest degree") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
ggplot(teacher, aes(x = years, y = total, color = degree))  +
geom_point(aes(shape = factor(fte))) +
labs(title = "Teacher salary vs years experience, by highest degree") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
ggplot(teacher, aes(x = years, y = total, color = degree))  +
geom_point(aes(shape = fte)) +
labs(title = "Teacher salary vs years experience, by highest degree") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
ggplot(teacher, aes(x = years, y = total, color = degree))  +
geom_point(aes(shape = fte)) +
geom_smooth(method = 'lm', se = F) +
labs(title = "Teacher salary vs years experience, by highest degree") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "steelblue") +
geom_smooth( method = 'lm', se = FALSE) + #adds line of best fit without error bars
labs(title = "Teacher salary vs years experience") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
ggplot(teacher, aes(x = years, y = total))  +
geom_point() +
geom_smooth( method = 'lm', se = FALSE) + #adds line of best fit without error bars
labs(title = "Teacher salary vs years experience") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
ggplot(teacher, aes(x = years, y = total, color = degree))  +
geom_point(aes(shape = fte)) +
labs(title = "Teacher salary vs years experience, by highest degree") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
ggplot(teacher, aes(x = years, y = total, color = degree))  +
geom_point(aes(shape = fte)) +
geom_smooth(method = 'lm', formula = y~x, se = FALSE) +
labs(title = "Teacher salary vs years experience, by highest degree") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
box multiple factor levels, violin
ggplot(teacher, aes(x = years, y = total, color = degree))  +
geom_point(aes(shape = fte)) +
geom_smooth(method = 'lm', formula = y~x, se = FALSE) +
labs(title = "Teacher salary vs years experience, by highest degree") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
ggplot(teacher, aes(x = degree)) +
geom_boxplot()
ggplot(teacher, aes(x = degree)) +
geom_bar()
ggplot(teacher, aes(x = degree, color = fte)) +
geom_bar()
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar()
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(aes (y = ..prop..))
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(aes (y = ..prop.., group = 1))
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(aes (y = ..prop.., group = 2))
ggplot(teacher, aes(x = degree)) +
geom_bar(aes (y = ..prop.., group = 2))
ggplot(teacher, aes(x = degree, y = ..prop..)) +
geom_bar()
ggplot(teacher, aes(x = degree, y = ..prop.., group = 2)) +
geom_bar()
ggplot(teacher, aes(x = degree, y = ..prop.., group = 1)) +
geom_bar()
# first load a package for side by side plots
library(gridExtra)
# Frequency bar plot
ggplot(teacher, aes(x = degree)) +
geom_bar(fill = "aquamarine3", color = "black")
# first load a package for side by side plots
library(gridExtra)
# Frequency bar plot
p1 <- ggplot(teacher, aes(x = degree)) +
geom_bar(fill = "aquamarine3", color = "black") +
labs( title = "MI teacher educational attainment")
# relative frequency bar plot
p2 <- ggplot(teacher, aes(x = degree, y = ..prop..)) +
geom_bar(fill = "aquamarine3", color = "black") +
labs( title = "MI teacher educational attainment")
grid.arrange(p1,p2, ncol = 2)
# first load a package for side by side plots
library(gridExtra)
# Frequency bar plot
p1 <- ggplot(teacher, aes(x = degree)) +
geom_bar(fill = "aquamarine3", color = "black") +
labs( title = "MI teacher educational attainment")
# relative frequency bar plot
p2 <- ggplot(teacher, aes(x = degree, y = ..prop.., group =1)) +
geom_bar(fill = "aquamarine3", color = "black") +
labs( title = "MI teacher educational attainment")
grid.arrange(p1,p2, ncol = 2)
# first load a package for side by side plots
library(gridExtra)
# Frequency bar plot
p1 <- ggplot(teacher, aes(x = degree)) +
geom_bar(fill = "aquamarine3", color = "black") +
labs( title = "MI teacher education (count)")
# relative frequency bar plot
p2 <- ggplot(teacher, aes(x = degree, y = ..prop.., group =1)) +
geom_bar(fill = "aquamarine3", color = "black") +
labs( title = "MI teacher education (proportion)")
grid.arrange(p1,p2, ncol = 2)
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(color = "black")
#stacked
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(color = "black")
#side by side
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(position = position_dodge(), color = "black")
#stacked
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(color = "black")
#side by side
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(aes(y = ..prop..), position = position_dodge(), color = "black")
#stacked
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(color = "black")
#side by side
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(aes(y = ..prop.., group =1 ), position = position_dodge(), color = "black")
#stacked
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(color = "black")
#side by side
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(aes(y = ..prop.., group =2 ), position = position_dodge(), color = "black")
#stacked
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(color = "black")
#side by side
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(aes(y = ..prop.., group = 3 ), position = position_dodge(), color = "black")
#stacked
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(color = "black")
#side by side
ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar( position = position_dodge(), color = "black")
#stacked
p1 <- ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(color = "black")
#side by side
p2 <- ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar( position = position_dodge(), color = "black")
grid.arrange(p1, p2, ncol = 2)
#stacked
p1 <- ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(color = "black") +
lab(title = "MI teacher education")
#stacked
p1 <- ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(color = "black") +
labs(title = "MI teacher education")
#side by side
p2 <- ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar( position = position_dodge(), color = "black")+
lab(title = "MI teacher education")
#stacked
p1 <- ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar(color = "black") +
labs(title = "MI teacher education")
#side by side
p2 <- ggplot(teacher, aes(x = degree, fill = fte)) +
geom_bar( position = position_dodge(), color = "black")+
labs(title = "MI teacher education")
grid.arrange(p1, p2, ncol = 2)
ggplot(teacher, aes(x = degree)) +
geom_bar(aes (y = ..prop.., fill = fte, group = 1))
ggplot(teacher, aes(x = degree)) +
geom_bar(aes (y = ..prop.., fill = fte, group = fte))
ggplot(teacher, aes(x = degree)) +
geom_bar(aes (y = ..prop.., fill = fte, group = degree))
ggplot(teacher, aes(x = degree)) +
geom_bar(aes (y = ..prop.., fill = fte, group = interaction(degree, fte)))
ggplot(teacher, aes(x = degree)) +
geom_bar(aes (y = ..prop.., fill = fte, group = degree))
ggplot(teacher, aes(x = degree)) +
geom_bar(aes (y = ..prop.., fill = fte, group = fte))
#open empty plot and specify explanatory (x) and response (y) variables
ggplot(teacher, aes(x = years, y = total))  +
geom_point(color = "steelblue", alpha = .5) +
labs(title = "Teacher salary vs years experience") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
library(tidyverse)
library(openintro)
ggplot(teacher, aes(x = total)) +
geom_boxp
ggplot(teacher, aes(x = total)) +
geom_boxplot()
ggplot(teacher, aes(y = total)) +
geom_boxplot()
ggplot(teacher, aes(y = total)) +
geom_boxplot() +
stat_summary(fun.y=mean, geom="point",  size=4)
ggplot(teacher, aes(y = total)) +
geom_boxplot() +
stat_summary(fun=mean, geom="point",  size=4)
stat_summary()
?stat_summary
ggplot(teacher, aes(y = total)) +
geom_boxplot() +
stat_summary(fun.y=mean, geom="point",  size=4)
ggplot(teacher, aes(x = total)) +
geom_boxplot() +
stat_summary(fun.y=mean, geom="point",  size=4)
ggplot(teacher, aes(x = total)) +
geom_boxplot() +
ggplot(teacher, aes(x = total)) +
geom_boxplot()
ggplot(teacher, aes(y = total)) +
geom_boxplot()  +
scale_x_continuous(expand=c(0,0))
ggplot(teacher, aes(y = total)) +
geom_boxplot()
?geom_boxplot
ggplot(teacher, aes(y = total)) +
geom_boxplot()  )+
ggplot(teacher, aes(y = total)) +
geom_boxplot()  +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(teacher, aes(y = total)) +
geom_boxplot()  +
theme(#axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(teacher, aes(y = total)) +
geom_boxplot()  +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(teacher, aes(y = total)) +
geom_boxplot()  +
theme(#axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(teacher, aes(y = total)) +
geom_boxplot()  +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(teacher, aes(y = total)) +
geom_boxplot()  +
theme(axis.text.x=element_blank(),
#axis.ticks.x=element_blank()
)
ggplot(teacher, aes(y = total)) +
geom_boxplot()  +
theme(axis.text.x=element_blank(), #this layer just removes the scale on the x-axis
axis.ticks.x=element_blank()) +
labs(title = "MI Teacher Salary")
ggplot(teacher, aes(x = years, y = total))  +
geom_point() +
geom_smooth( method = 'lm', formula = y~x, se = FALSE) + #adds line of best fit without error bars
labs(title = "Teacher salary vs years experience") +
xlab("Experience (years)") +
ylab("Total salary (USD)")
ggplot(teacher, aes(x = degree, y = total)) +
geom_boxplot( )
ggplot(teacher, aes(x = degree, y = total)) +
geom_boxplot(outlier.color = "red")
ggplot(teacher, aes(x = degree, y = total)) +
geom_boxplot(outlier.color = "red") +
stat_summary(fun = mean)
ggplot(teacher, aes(x = degree, y = total)) +
geom_boxplot(outlier.color = "red",
outlier.size = 4) +
stat_summary(fun = mean, )
ggplot(teacher, aes(x = degree, y = total)) +
geom_boxplot(outlier.color = "red",
outlier.size = 2) +
stat_summary(fun = mean, )
ggplot(teacher, aes(x = degree, y = total)) +
geom_boxplot(outlier.color = "red",
outlier.size = 2) +
stat_summary(fun = mean, na.rm = T )
ggplot(teacher, aes(x = degree, y = total)) +
geom_boxplot(outlier.color = "red",
outlier.size = 2) +
stat_summary(fun.y = mean, na.rm = T )
ggplot(teacher, aes(x = degree, y = total)) +
geom_boxplot(outlier.color = "red",
outlier.size = 2) +
stat_summary_bin(fun = mean)
ggplot(teacher, aes(x = degree, y = total)) +
geom_boxplot(outlier.color = "red",
outlier.size = 2) +
stat_summary_bin(fun = "mean", geom = "point")
ggplot(teacher, aes(x = degree, y = total)) +
geom_boxplot(outlier.color = "red",
outlier.size = 2) +
stat_summary_bin(fun = "mean", geom = "point", color = "blue")
ggplot(teacher, aes(x = degree, y = total)) +
geom_boxplot(outlier.color = "red",
outlier.size = 2) +
stat_summary_bin(fun = "mean", geom = "point", color = "blue", size = 2)
ggplot(teacher, aes(x = degree, y = total)) +
geom_boxplot(outlier.color = "red",
outlier.size = 2) +
stat_summary_bin(fun = "mean", geom = "point", color = "blue", size = 2) +
lab(title = "MI teacher salaries by degree")
ggplot(teacher, aes(x = degree, y = total)) +
geom_boxplot(outlier.color = "red",
outlier.size = 2) +
stat_summary_bin(fun = "mean", geom = "point", color = "blue", size = 2) +
labs(title = "MI teacher salaries by degree")
bookdown::render_book()
bookdown::render_book()
file.rename("07-references.Rmd", "07-references.Rmd")
file.rename("07-references.Rmd", "08-references.Rmd")
file.rename("08-modeling.Rmd", "07-modeling.Rmd")
bookdown::render_book()
library(tidyverse)
table1
?table1
set.seed(1123)
tibble( coke = sample(1:5, 10, replace = T),
pepsi = sample(1:5, 10, replace = T),
rc = sample(1:5, 10, replace = T)) %>% knitr::kable()
f <- function(t){return(t^3 / (t^4 + t^2))}
f(.001)
f(.0000000001)
set.seed(1123) # make sure random numbers generated above are the same.
dfTidy <- tibble( #first a column of the drink participants had
drink =  c( rep("coke", 10), rep("pepsi", 10), rep("rc", 10)),
# then a column of their scores
score = c(sample(1:5, 10, replace = T),
sample(1:5, 10, replace = T),
sample(1:5, 10, replace = T) ))
head(dfTidy)
set.seed(1123)
df <- tibble( coke = sample(1:5, 10, replace = T),
pepsi = sample(1:5, 10, replace = T),
rc = sample(1:5, 10, replace = T))  #generate table of random numbers.
df %>% knitr::kable()
boxplot(df)
ggplot(dfTidy, aes(x = drink, y = score)) +
geom_boxplot()
ggplot(dfTidy, aes(x = drink, y = score)) +
geom_boxplot()
newDf <- dfTidy %>% #start with dfTidy
bind_rows(dp) %>% #adds dp to the bottom of dfTidy
mutate(newScale = .25*score - .25)
set.seed(1123)
dp <- tibble(drink = rep("dp", 10),
score = sample(1:5, 10, replace = TRUE))
newDf <- dfTidy %>% #start with dfTidy
bind_rows(dp) %>% #adds dp to the bottom of dfTidy
mutate(newScale = .25*score - .25)
set.seed(1123) #nothing special about this seed.
newDf %>% # more piping!
slice_sample(n = 10)#random sample of 10 rows
set.seed(1123)
#more piping!
newDf %>%
slice_sample(n = 10)
?rbind
#using tidyverse functions
newDf1 <- bind_rows(dfTidy, dp)
newDf1 <- mutate(newDf1, newScale = .25*score - .25)
newDf1 == newDf
#check to see we got the same thing
all.equal(newDf, newDf1)
newDf2 <- mutate( bind_rows(dfTidy, dp), newScale = .25*score - .25)
all.equal(newDf, newDf2)
?mutate
?pivot_longer
dfTidy1 <- df %>%
pivot_longer(cols = c("coke", "pepsi", "rc"),
names_to = "score")
dfTidy1 <- df %>%
#specify the columns are actually values
pivot_longer(cols = c("coke", "pepsi", "rc"),
#then specify column/variable name
names_to = "drink",
#finally specify the name of the values
values_to = "score"
)
all.equal(dfTidy1, dfTidy)
view(dfTidy1)
view(dfTidy1 %>% arrange(drink, score), dfTidy %>% arrange(drink, score))
all.equal(dfTidy1 %>% arrange(drink, score), dfTidy %>% arrange(drink, score))
glimpse(dfTidy1)
dfTidy %>%
arrange(drink) %>%
all.equal(dfTidy1) %>%
arrange(drink))
dfTidy %>%
arrange(drink) %>%
all.equal(dfTidy1 %>%
arrange(drink))
all.equal( dfTidy %>%
arrange(drink),
dfTidy1%>%
arrange(drink))
?table2
table2
?pivot_wider
table2 %>%
pivot_wider(names_from = "type",
values_from = "count")
bookdown::render_book()
bookdown::render_book()
