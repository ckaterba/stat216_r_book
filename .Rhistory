ggplot(dfTidy, aes(x = drink, y = score)) +
geom_boxplot()
newDf <- dfTidy %>% #start with dfTidy
bind_rows(dp) %>% #adds dp to the bottom of dfTidy
mutate(newScale = .25*score - .25)
set.seed(1123)
dp <- tibble(drink = rep("dp", 10),
score = sample(1:5, 10, replace = TRUE))
newDf <- dfTidy %>% #start with dfTidy
bind_rows(dp) %>% #adds dp to the bottom of dfTidy
mutate(newScale = .25*score - .25)
set.seed(1123) #nothing special about this seed.
newDf %>% # more piping!
slice_sample(n = 10)#random sample of 10 rows
set.seed(1123)
#more piping!
newDf %>%
slice_sample(n = 10)
?rbind
#using tidyverse functions
newDf1 <- bind_rows(dfTidy, dp)
newDf1 <- mutate(newDf1, newScale = .25*score - .25)
newDf1 == newDf
#check to see we got the same thing
all.equal(newDf, newDf1)
newDf2 <- mutate( bind_rows(dfTidy, dp), newScale = .25*score - .25)
all.equal(newDf, newDf2)
?mutate
?pivot_longer
dfTidy1 <- df %>%
pivot_longer(cols = c("coke", "pepsi", "rc"),
names_to = "score")
dfTidy1 <- df %>%
#specify the columns are actually values
pivot_longer(cols = c("coke", "pepsi", "rc"),
#then specify column/variable name
names_to = "drink",
#finally specify the name of the values
values_to = "score"
)
all.equal(dfTidy1, dfTidy)
view(dfTidy1)
view(dfTidy1 %>% arrange(drink, score), dfTidy %>% arrange(drink, score))
all.equal(dfTidy1 %>% arrange(drink, score), dfTidy %>% arrange(drink, score))
glimpse(dfTidy1)
dfTidy %>%
arrange(drink) %>%
all.equal(dfTidy1) %>%
arrange(drink))
dfTidy %>%
arrange(drink) %>%
all.equal(dfTidy1 %>%
arrange(drink))
all.equal( dfTidy %>%
arrange(drink),
dfTidy1%>%
arrange(drink))
?table2
table2
?pivot_wider
table2 %>%
pivot_wider(names_from = "type",
values_from = "count")
bookdown::render_book()
bookdown::render_book()
library(tidyverse)
transmute?
?transmute
bookdown::serve_book()
?mutate
?summarize
?group_by
?summarize
gss2010
?gss2010
library(bookdown)
library(servr)
complete.cases(gss2010)
sum(complete.cases(gss2010))
glimpse(gss2010)
data(gss2010)
gss2010 <- gss2010 %>%
mutate(totalHours = 5*hrsrelax + hrs1)
library(tidyverse)
set.seed(1123)
df <- tibble( coke = sample(1:5, 10, replace = T),
pepsi = sample(1:5, 10, replace = T),
rc = sample(1:5, 10, replace = T))  #generate table of random numbers.
df %>% knitr::kable()
set.seed(1123) # make sure random numbers generated above are the same.
dfTidy <- tibble( #first a column of the drink participants had
drink =  c( rep("coke", 10), rep("pepsi", 10), rep("rc", 10)),
# then a column of their scores
score = c(sample(1:5, 10, replace = T),
sample(1:5, 10, replace = T),
sample(1:5, 10, replace = T) ))
head(dfTidy)
ggplot(dfTidy, aes(x = drink, y = score)) +
geom_boxplot()
set.seed(1123)
dp <- tibble(drink = rep("dp", 10),
score = sample(1:5, 10, replace = TRUE))
newDf <- dfTidy %>% #start with dfTidy
bind_rows(dp) %>% #adds dp to the bottom of dfTidy
mutate(newScale = .25*score - .25) #add new column to whole dataset.
set.seed(1123)
#more piping!
newDf %>%
slice_sample(n = 10)
newDf1 <- bind_rows(dfTidy, dp)
newDf1 <- mutate(newDf1, newScale = .25*score - .25)
#check to see we got the same thing
all.equal(newDf, newDf1)
newDf2 <- mutate( bind_rows(dfTidy, dp), newScale = .25*score - .25)
#are they equal?
all.equal(newDf, newDf2)
dfTidy1 <- df %>%
#specify the columns are actually values
pivot_longer(cols = c("coke", "pepsi", "rc"),
#then specify column/variable name
names_to = "drink",
#finally specify the name of the values
values_to = "score"
)
glimpse(dfTidy1)
all.equal( dfTidy %>%
arrange(drink),
dfTidy1%>%
arrange(drink))
table2
table2 %>%
#first specify where the new column names are coming from
pivot_wider(names_from = "type",
#next specify where the new column values are coming from
values_from = "count")
library(openintro)
data(gss2010)
glimpse(gss2010)
gss2010 <- gss2010 %>%
mutate(totalHours = 5*hrsrelax + hrs1)
head(gss2010)
glimpse(gss2010)
slice_sample(gss2010, n  10)
slice_sample(gss2010, n =10)
gss2010 <- gss2010 %>%
mutate(totalHours = 5*hrsrelax + hrs1,
propTimeWorking = totalHours/(5*24))
# random sample of 10 rows from the data set
slice_sample(gss2010, n =10)
# random sample of 10 rows from the data set
glimpse( slice_sample(gss2010, n =10) )
new_gss <- gss2010 %>%
transmute(totalHours = 5*hrsrelax + hrs1, #hours spent working and relaxing
propTimeWorking = totalHours/(5*24)) %>%
drop_na() #drops all rows with an NA
slice_sample(new_gss, n = 10)
new_gss <- gss2010 %>%
transmute(degree = degree,
totalHours = 5*hrsrelax + hrs1, #hours spent working and relaxing
propTimeWorking = totalHours/(5*24)) %>%
drop_na() #drops all rows with an NA
slice_sample(new_gss, n = 10)
max(new_gss$propTimeWorking)
slice_sample(new_gss, n = 7)
library(tidyverse)
set.seed(1123)
df <- tibble( coke = sample(1:5, 10, replace = T),
pepsi = sample(1:5, 10, replace = T),
rc = sample(1:5, 10, replace = T))  #generate table of random numbers.
df %>% knitr::kable()
set.seed(1123) # make sure random numbers generated above are the same.
dfTidy <- tibble( #first a column of the drink participants had
drink =  c( rep("coke", 10), rep("pepsi", 10), rep("rc", 10)),
# then a column of their scores
score = c(sample(1:5, 10, replace = T),
sample(1:5, 10, replace = T),
sample(1:5, 10, replace = T) ))
head(dfTidy)
ggplot(dfTidy, aes(x = drink, y = score)) +
geom_boxplot()
set.seed(1123)
dp <- tibble(drink = rep("dp", 10),
score = sample(1:5, 10, replace = TRUE))
newDf <- dfTidy %>% #start with dfTidy
bind_rows(dp) %>% #adds dp to the bottom of dfTidy
mutate(newScale = .25*score - .25) #add new column to whole dataset.
set.seed(1123)
#more piping!
newDf %>%
slice_sample(n = 10)
newDf1 <- bind_rows(dfTidy, dp)
newDf1 <- mutate(newDf1, newScale = .25*score - .25)
#check to see we got the same thing
all.equal(newDf, newDf1)
newDf2 <- mutate( bind_rows(dfTidy, dp), newScale = .25*score - .25)
#are they equal?
all.equal(newDf, newDf2)
dfTidy1 <- df %>%
#specify the columns are actually values
pivot_longer(cols = c("coke", "pepsi", "rc"),
#then specify column/variable name
names_to = "drink",
#finally specify the name of the values
values_to = "score"
)
glimpse(dfTidy1)
all.equal( dfTidy %>%
arrange(drink),
dfTidy1%>%
arrange(drink))
table2
table2 %>%
#first specify where the new column names are coming from
pivot_wider(names_from = "type",
#next specify where the new column values are coming from
values_from = "count")
library(openintro)
data(gss2010)
glimpse(gss2010)
?mean
gss2010 %>%
group_by(degree) %>%
summarize( meanHrsWrk = mean(hrs1, na.rm = TRUE),
sdHrsWrk = sd(hrs1, na.rm = TRUE))
gss2010 %>%
group_by(degree) %>%
summarize( meanHrsWrk = mean(hrs1, na.rm = TRUE),
sdHrsWrk = sd(hrs1, na.rm = TRUE)) %>%
arrange(desc(meanHrsWrk))
gss2010 %>%
group_by(degree) %>%
summarize( meanHrsWrk = mean(hrs1, na.rm = TRUE),  # avg hours worked, removing NA
sdHrsWrk = sd(hrs1, na.rm = TRUE), # sd of hours worked, removing NA
meanHrsRlx = mean(hrsrelax, na.rm = TRUE),
sdHrsRlx = sd(hrsrelax, na.rm = TRUE),
meanMntlHlth = mean(mntlhlth, na.rm = TRUE),
sdMntlHlth = sd(mntlhlth, na.rm = TRUE)
) %>%
arrange(desc(meanHrsWrk)) # arrange results in descending order
gss2010 %>%
group_by(degree) %>%
summarize( meanHrsWrk = mean(hrs1, na.rm = TRUE),  # avg hours worked, removing NA
sdHrsWrk = sd(hrs1, na.rm = TRUE), # sd of hours worked, removing NA
meanHrsRlx = mean(hrsrelax, na.rm = TRUE),
meanMntlHlth = mean(mntlhlth, na.rm = TRUE)
) %>%
arrange(desc(meanHrsWrk)) # arrange results in descending order
gss2010 %>%
group_by(degree) %>%
summarize( degCount = n()) # special function to count the number in each group
gss2010 %>%
filter( is.na(grass)) %>%
group_by(degree) %>%
summarize( degCount = n()) # special function to count the number in each group
gss2010 %>%
filter( !is.na(grass) ) %>% #selects all rows where grass is *not* NA
group_by(degree) %>%
summarize( degCount = n()) # special function to count the number in each group
unique(gss2010$grass)
gss2010 %>%
filter( !is.na(grass) ) %>% #selects all rows where grass is *not* NA
group_by(degree) %>%
summarize( degCount = n(), # special function to count the number in each group
legalCount = sum(grass == "LEGAL" )
)
gss2010 %>%
filter( !is.na(grass) ) %>% #selects all rows where grass is *not* NA
group_by(degree) %>%
summarize( degCount = n(), # special function to count the number in each group
legalCount = sum(grass == "LEGAL" ),
legalProp = legalCount / degCount)
)
gss2010 %>%
filter( !is.na(grass) ) %>% #selects all rows where grass is *not* NA
group_by(degree) %>%
summarize( degCount = n(), # special function to count the number in each group
legalCount = sum(grass == "LEGAL" ),
legalProp = legalCount / degCount
)
gss2010 %>%
filter( !is.na(grass) ) %>% #selects all rows where grass is *not* NA
group_by(degree) %>%
summarize( degCount = n(), # special function to count the number in each group
legalCount = sum(grass == "LEGAL" ),
legalProp = legalCount / degCount
)  $%>%
gss2010 %>%
filter( !is.na(grass) ) %>% #selects all rows where grass is *not* NA
group_by(degree) %>%
summarize( degCount = n(), # special function to count the number in each group
legalCount = sum(grass == "LEGAL" ),
legalProp = legalCount / degCount
)  %>%
arrange(desc(legalProp))
bookdown::render_book()
?pchisq
3/12
3/12
val <- c(1,2,5,0)
prob <- c(3/12, 2/12, 1/12, 6/12)
exp_val <- sum(val*prob)
exp_val
varX <- sum(prob*(val - exp_val)^2)
varX
sdX <- sqrt(varX)
sdX
qbinom(.5, 10, .6)
qbinom(.5, 11, .6)
?qbinom
bookdown::render_book()
bf <- tibble(k = 0:15,
"P(X=k)" = dbinom(k, 15, .43))
library(tidyverse)
bf <- tibble(k = 0:15,
"P(X=k)" = dbinom(k, 15, .43))
ggplot(bf, aes(x = k, y = "P(X=k)")) +
geom_bar(color = "black", fill = "steelblue")
ggplot(bf, aes(x = k, y = "P(X=k)")) +
geom_col(color = "black", fill = "steelblue")
bf <- tibble(k = 0:15,
"P(X=k)" = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = "P(X=k)")) +
geom_col(color = "black", fill = "steelblue")
bf <- tibble(k = 0:15,
p = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = "P(X=k)")) +
geom_col(color = "black", fill = "steelblue")
bf <- tibble(k = as.factor(0:15),
p = dbinom(k, 15, .43))
bf <- tibble(k = 0:15,
p = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = "P(X=k)")) +
geom_col(color = "black", fill = "steelblue")
bf <- tibble(k = 0:15,
prob = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue")
bf <- tibble(k = 0:15,
prob = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
ylab("P(X=k)") +
labs(title = "Binomial Prob dist w/ p = .43 and n = 15")
dbinom(4, 15, .43)
pbinom(4, 15, .43)
pbinom(3, 15, .43, lower.tail= FALSE)
#or
1 - pbinom(3, 15, .43)
qbinom(.75, 15, .43)
pbinom(8, 15, .43)
pbinom(7, 15, .43)
bookdown::render_book()
bookdown::render_book()
1 - pbinom(1, 8, .898)
1 - pbinom(0, 8, .898)
choose(4, 1)
library(tidyverse)
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,  #dnorm for normal distribution
geom = "line") + #plot graph of dnorm
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-3, -3)) +
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-3, 1)) +
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,  #dnorm for normal distribution
geom = "line") + #plot graph of dnorm
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-3, 1)) +
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,  #dnorm for normal distribution
geom = "line") + #plot graph of dnorm
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-3, 2)) + #set limits of filling here
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,  #dnorm for normal distribution
geom = "line") + #plot graph of dnorm
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(2,3)) + #set limits of filling here
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,
geom = "line") +
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-3,1)) + #lower tail filling
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(1,3)) + #upper tail filling
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,
geom = "line") +
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-3,-1)) + #lower tail filling
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(1,3)) + #upper tail filling
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,  #dnorm for normal distribution
geom = "line") + #plot graph of dnorm
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(2,3)) + #set limits of filling here
labs(x = "Z", y = "")
ggplot(data.frame(x = c(-3,3)), #defines x limit on plot
aes(x = x)) +
stat_function(fun = dnorm,
geom = "line") +
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-2,1)) + #set limits of filling here
labs(x = "Z", y = "")
rgeom(5, .2)
rgeom(5, .2)
rgeom(5, .2)
rgeom(5, .2)
gf <- tibble(k = 1:15,
prob = dgeom(k-1,.43))
ggplot(gf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
xlab("k")
ylab("P(X=k)") +
labs(title = "Geometric Prob. dist. w/ p = .43 for k = 1 to 15")
gf <- tibble(k = 1:15,
prob = dgeom(k-1,.43))
ggplot(gf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
xlab("k") +
ylab("P(X=k)") +
labs(title = "Geometric Prob. dist. w/ p = .43 for k = 1 to 15")
dgeom(5, .43)
# or
(1-.43)^5*.43
pgeom(4, .43, lower.tail = FALSE)
# or
1 - (dgeom(0, .43) + dgeom(1, .43) + dgeom(2, .43) + dgeom(3, .43)
+ dgeom(4, .43))
pgeom(4, .43, lower.tail = FALSE) # 1 - P(X <= 5) = P(X >5) = P(X >=6)
# or
1 - (dgeom(0, .43) + dgeom(1, .43) + dgeom(2, .43) + dgeom(3, .43)
+ dgeom(4, .43))
# or
1 - (dgeom(0, .43) + dgeom(1, .43) + dgeom(2, .43) + dgeom(3, .43)
+ dgeom(4, .43))
pgeom(4, .43, lower.tail = FALSE) # 1 - P(X <= 5) = P(X >5) = P(X >=6)
# or
1 - (dgeom(0, .43) + dgeom(1, .43) + dgeom(2, .43) + dgeom(3, .43)
+ dgeom(4, .43))
qgeom(.75, .43)
pgeom(2, .43)
bookdown::render_book()
bookdown::render_book()
bf <- tibble(k = 0:15,
prob = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
xlab("k") +
ylab("P(X=k)") +
labs(title = "Binomial Prob dist w/ p = .43 and n = 15")
bf <- tibble(k = 0:15,
prob = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
xlab("k") +
ylab("P(X=k)") +
labs(title = "Binomial Prob dist w/ p = .43 and n = 15")
bf <- tibble(k = 0:15,
prob = dbinom(k, 15, .43))
ggplot(bf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
xlab("k") +
ylab("P(X=k)") +
labs(title = "Binomial Prob dist w/ p = .43 and n = 15")
bookdown::render_book()
bookdown::render_book()
gf <- tibble(k = 1:15,
prob = dgeom(k-1,.43))
ggplot(gf, aes(x = as.factor(k), y = prob)) +
geom_col(color = "black", fill = "steelblue") +
xlab("k") +
ylab("P(X=k)") +
labs(title = "Geometric Prob. dist. w/ p = .43 for k = 1 to 15")
bookdown::render_book()
