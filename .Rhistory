args = args,
geom = "line") +
stat_function(fun = dnorm,
args = args,
geom = "area",
fill = "steelblue",
xlim = c(.55, .6)) +
labs(title = "P-value of one-sided upper hypothesis test",
subtitle = "null prop. = .5, p_hat = .55, n = 200",
x = "sample proprotion",
y = "")
#set mean and sd of normal sampling dist.
args <- c(mean = .5, sd = sqrt(.5*.5/200))
#plotting
ggplot(data.frame(x = c(.4,.6)), aes(x = x)) +
stat_function(fun = dnorm,
args = args,
geom = "line") +
stat_function(fun = dnorm,
args = args,
geom = "area",
fill = "steelblue",
xlim = c(.4, .55)) +
labs(title = "P-value of one-sided lower hypothesis test",
subtitle = "null prop. = .5, p_hat = .55, n = 200",
x = "sample proprotion",
y = "")
# generates results from 5000 binomial experiments w/ probability of
# success = .1 and sample size of n = 2044, returns sample proportion.
null_dist <- tibble(p_hat = rbinom(5000, 2044, .1)/2044)
# center of distribution
mean(null_dist$p_hat)
# standard error
SE <- sd(null_dist$p_hat)
SE
ggplot(null_dist, aes(x = p_hat)) +
geom_histogram(bins = 15, color = "black", fill = "steelblue") +
geom_vline(xintercept = pHat, color = "red") +
labs(title = "Null distribution with p = .1 and n = 2044, pHat = .149",
x = "Sample proportion, p-hat")
# count the number of simulated samples with proportions at least as large as
# our actual sample proportion, divide by number of samples in simulated dist.
pValue <- sum(null_dist$p_hat >= pHat ) / length(null_dist$p_hat)
pValue
ggplot(data.frame(x = c(-3,3)), aes(x = x)) +
stat_function(fun = dnorm,
geom = "line") +
stat_function(fun = dnorm,
geom = "area",
fill = "steelblue",
xlim = c(-1.96, 1.96))+
labs(title = "What bounds give us a central area of .95?",
x = "Z", y = "")
qnorm(.025, lower.tail = FALSE)
cvTable <- tibble( conf.level = c(.9, .95, .98, .99),
crit.val = qnorm( (1 - conf.level)/2, lower.tail =F))
cvTable
# components of CI
pHat <- sum( gss2010$degree == "LT HIGH SCHOOL") / length(gss2010$degree)
SE <- sqrt(pHat*(1-pHat)/length(gss2010$degree))
zCrit <- qnorm( (1 - .95)/2, lower.tail = FALSE)
# CI
pHat + c(-1,1)*zCrit*SE
#set mean and sd of normal sampling dist.
args <- c(mean = .5, sd = sqrt(.5*.5/200))
#plotting
ggplot(data.frame(x = c(.4,.6)), aes(x = x)) +
stat_function(fun = dnorm,
args = args,
geom = "line") +
stat_function(fun = dnorm,
args = args,
geom = "area",
fill = "steelblue",
xlim = c(.4, .45))+
stat_function(fun = dnorm,
args = args,
geom = "area",
fill = "steelblue",
xlim = c(.55, .6)) +
labs(title = "P-value of two-sided hypothesis test",
subtitle = "null prop. = .5, p_hat = .55, n = 200",
x = "sample proprotion",
y = "")
pNull <- .5
SE <- sqrt(pNull*(1 - pNull)/200)
pHat <- .55
pVal <- 2*pnorm(.55, mean = pNull, sd = SE, lower.tail = F)
pVal
#set mean and sd of normal sampling dist.
args <- c(mean = .5, sd = sqrt(.5*.5/200))
#plotting
ggplot(data.frame(x = c(.4,.6)), aes(x = x)) +
stat_function(fun = dnorm,
args = args,
geom = "line") +
stat_function(fun = dnorm,
args = args,
geom = "area",
fill = "steelblue",
xlim = c(.55, .6)) +
labs(title = "P-value of one-sided upper hypothesis test",
subtitle = "null prop. = .5, p_hat = .55, n = 200",
x = "sample proprotion",
y = "")
pNull <- .5
SE <- sqrt(pNull*(1 - pNull)/200)
pHat <- .55
pVal <- pnorm(.55, mean = pNull, sd = SE, lower.tail = F)
pVal
#set mean and sd of normal sampling dist.
args <- c(mean = .5, sd = sqrt(.5*.5/200))
#plotting
ggplot(data.frame(x = c(.4,.6)), aes(x = x)) +
stat_function(fun = dnorm,
args = args,
geom = "line") +
stat_function(fun = dnorm,
args = args,
geom = "area",
fill = "steelblue",
xlim = c(.4, .55)) +
labs(title = "P-value of one-sided lower hypothesis test",
subtitle = "null prop. = .5, p_hat = .55, n = 200",
x = "sample proprotion",
y = "")
pNull <- .5
SE <- sqrt(pNull*(1 - pNull)/200)
pHat <- .55
pVal <- pnorm(.55, mean = pNull, sd = SE)
pVal
n <- length(gss2010$degree)
n
pHat <- sum(gss2010$degree == "LT HIGH SCHOOL")/n
pHat
pNull <- .1
# will return a logical, T/F
n*pNull >= 10
n*(1 - pNull) >= 10
SE <- sqrt(pNull*(1- pNull)/n)
pValue <- pnorm(pHat, mean = pNull, sd = SE, lower.tail = F)
pValue
slice_sample(cancer_in_dogs, n = 4)
sumTab <- table(cancer_in_dogs$response, cancer_in_dogs$order)
sumTab %>% kable()
n1 <- sum(sumTab[,1])
n2 <- sum(sumTab[,2])
pHat1 <- sumTab[1,1] / n1
pHat2 <- sumTab[1,2] / n2
c(pHat1, pHat2)
pDiff <- pHat1 - pHat2
pDiff
SE <- sqrt(pHat1*(1- pHat1)/n1 +  pHat2*(1- pHat2)/n2)
SE
zCrit <- qnorm( (1-.95)/2, lower.tail = F)
ciDiff <- pDiff + c(-1, 1)*zCrit*SE
ciDiff
sumTab %>% kable()
pPool <- sum(sumTab[1,])/sum(sumTab)
pPool
c( n1*pPool, n1*(1-pPool))
c( n2*pPool, n2*(1-pPool))
SE <- sqrt( pPool*(1-pPool)/n1 + pPool*(1-pPool)/n2)
SE
pHat1 <- sumTab[1,1] / n1
pHat2 <- sumTab[1,2] / n2
pDiff <- pHat1 - pHat2
pDiff
Z <- pDiff / SE
Z
pVal <- 2*pnorm(Z,lower.tail = FALSE)
pVal
table(sp500_seq$race)
table(smoking$smoke, smoking$marital_status)
ggplot(tibble(x = c(0, 18)), aes(x = x)) +
geom_function(fun = dchisq,
args = list(df = 5)) +
stat_function(fun = dchisq,
args = list(df = 5),
geom = "area",
xlim = c(6.2, 18),
fill = "steelblue") +
labs( x = "chi-squared", y = "",
title = "Chi-squared distribution with df = 5",
subtitle = "p-value for chi-squared = 6.2 shaded")
pchisq(6.2, df = 5, lower.tail=FALSE)
spTable <- table(sp500_seq$race)
spTable
sp500_1950_2018 %>%
filter( as.character(Date) >= '1990' &
as.character(Date) <= '2012') %>%
mutate(dir = if_else( Close > Open, TRUE, FALSE)) %>%
summarize( upProb = sum(dir)/length(dir))
# total number of up-to-up runs
n <-sum(spTable)
#list of factors
days <- c(1:6, "7+")
#probability/proportion of each factor level
probs <- c( dgeom(0:5,.531), pgeom(5, .531, lower.tail = F))
# expected counts
expected <- n*probs
expected
# display all of the above in a horizontally organized table
t( tibble(days, prob = round(probs, 3), expected = round(expected, 3))) %>% kable()
# each individual squared z-score
(spTable - expected)^2/expected
# test stat
chi.sq <- sum((spTable - expected)^2/expected)
chi.sq
pchisq(chi.sq, df = 6, lower.tail = FALSE)
(spTable - expected)/sqrt(expected)
observed <- table(smoking$smoke, smoking$marital_status)
observed
n <- sum(observed)
row1 <- sum(observed[1,])
column1 <- sum(observed[,1])
c(n, row1, column1)
exp11 <- row1*column1/n
exp11
(observed[1,1]- exp11)^2/exp11
# define an matrix with the right dimensions of all zeroes
expected <- matrix( rep(0, prod(dim(observed))),
nrow = dim(observed)[1],
ncol = dim(observed)[2])
# iterate over all rows
for(i in 1:dim(observed)[1]){
#iterage over all columns
for(j in 1:dim(observed)[2]){
#update i,j-th entry with expected count
expected[i,j] <- sum(observed[i,])*sum(observed[,j])/sum(observed)
}
}
expected
(observed - expected)^2/expected
chi <- sum((observed - expected)^2/expected)
chi
pchisq(chi, df = 4, lower.tail = F)
(observed - expected)/sqrt(expected)
df <- data.frame(x = c(0, 7.5))
popPlot <- ggplot( data = df,
aes(x = x)) +
stat_function(fun = dgamma
, args = list(shape = 2, scale = 2)) +
labs(
title = "Income distribution of Flathead County residents"
, x = "Annual income"
, y = "Density"
) +
scale_x_continuous(breaks = c(0, 4)
, labels = c("0", "50k")) +
theme(axis.ticks.y = element_blank(),
axis.text.y = element_blank())
sampPlot <- ggplot(data = df,
aes(x = x)) +
stat_function(fun = dnorm
, args = list(mean = 4, sd = sqrt(8/ 100))
, color = "red") +
labs(
title = "Distribution of sample average income"
, subtitle = "n = 100"
, x = "Average annual income"
, y = "Density"
) +
scale_x_continuous(breaks = c(0, 4)
, labels = c("0", "50k")) +
theme(axis.ticks.y = element_blank(),
axis.text.y = element_blank())
popPlot + sampPlot
ggplot(faithful, aes(x = waiting)) +
geom_histogram(color = "black"
, fill = "steelblue"
, bins = 20) +
labs( title = "Wait time between Yellowstone eruptions"
, subtitle = "n = 272")
summary(faithful$waiting)
(summary(faithful$waiting) - mean(faithful$waiting))/sd(faithful$waiting)
ggplot(women, aes(x = height)) +
geom_histogram(color = "black"
, fill = "steelblue"
, bins = 7) +
labs( title = "Height of American women in 1975"
, subtitle = "n = 15")
summary(women$height)
(summary(women$height) - mean(women$height))/sd(women$height)
n <- length(faithful$waiting)
xBar <- mean(faithful$waiting)
s <- sd(faithful$waiting)
SE <- s / sqrt(n)
tStar <- qt( (1 - .95)/2, df = n-1, lower.tail = FALSE)
tStar
cI <- xBar + c(-1,1)*tStar*SE
cI
n <- length(women$height)
xBar <- mean(women$height)
s <- sd(women$height)
SE <- s / sqrt(n)
tStar <- qt( (1 - .95)/2, df = n-1, lower.tail = FALSE)
tStar
cI <- xBar + c(-1,1)*tStar*SE
cI
n <- length(women$height)
xBar <- mean(women$height)
s <- sd(women$height)
SE <- s / sqrt(n)
#printing the calculated values
c(n = n, xBar = xBar, s = s, SE = SE)
t <- (xBar - 64.4)/SE
t
pVal <- pt(t, df = 15 - 1, lower.tail = F)
pVal
n <- length(faithful$waiting)
xBar <- mean(faithful$waiting)
s <- sd(faithful$waiting)
SE <- s / sqrt(n)
#printing the calculated values
c(n = n, xBar = xBar, s = s, SE = SE)
t <- (xBar - 75)/SE
t
pVal <- 2*pt(t, df = n-1)
unique(gss2010$grass)
mj <- gss2010 %>%
filter(!is.na(hrs1) & !is.na(grass)) %>% #select only rows with non-null values in hrs1 and grass
select(grass, hrs1)
mj %>%
group_by(grass) %>%
summarise(
n = n() #sample size for each stance on mj legalization
, xBar = mean(hrs1) #sample average for stance
, s = sd(hrs1) #sample standard deviation for each stance
)
legal <- mj %>%
filter(grass == 'LEGAL')
illegal <- mj %>%
filter(grass == 'NOT LEGAL')
#legal
xBarL <- mean(legal$hrs1)
sL <- sd(legal$hrs1)
nL <- length(legal$hrs1)
#illegal
xBarN <- mean(illegal$hrs1)
sN <- sd(illegal$hrs1)
nN <- length(illegal$hrs1)
#standard error
SE <- sqrt( sL^2/nL + sN^2/nN)
#note that the null difference is 0
t <- (xBarL - xBarN)/SE
t
df1 <- (sL^2/nL + sN^2/nN)^2/ ( sL^4/(nL^2*(nL-1)) + sN^4/(nN^2*(nN-1)))
df1
df2 <- min(nL-1, nN-1)
df2
#using df1, the 'official' degrees of freedom
2*pt(t, df = df1, lower.tail = FALSE)
#using df2, the 'approximate' degrees of freedom
2*pt(t, df = df2, lower.tail = FALSE)
df1
df2
c(point.est = xBarL - xBarN, SE = SE, df = df2)
t.crit <- qt( (1-.9)/2, lower.tail = FALSE)
t.crit <- qt( (1-.9)/2, df = df2, lower.tail = FALSE)
t.crit
(xBarL - xBarN) + c(-1,1)*t.crit*SE
?lapply
paste(letters, 0)
paste(letters, 0, sep = '')
paste(letters[1:3], 0, sep = '')
paste(LETTERS[1:3], 0, sep = '')
paste(LETTERS[1:3], c(0, 1), sep = '')
paste(LETTERS[1:3], rep(0:1, each 3), sep = '')
paste(LETTERS[1:3], rep(0:1, each=3), sep = '')
Group <- rep(paste(LETTERS[1:3], rep(0:1, each=3), sep = '')
, each = 15)
Group
# generate group labels
# A0 15 times, then B0 fiteen times, ... , A1 fiteen times, ... C1 fifteen times
Group <- rep(paste(LETTERS[1:3], rep(0:1, each=3), sep = '')
, each = 15)
# simulated H values
x1 <- rnorm(15, mean = 1, sd = 5)
x2 <- rnorm(15, mean = .5, sd = 4)
x3 <- rnorm(15, mean = 1.5, sd = 4.25)
x4 <- rnorm(15, mean = 1, sd = 1)
x5 <- rnorm(15, mean = .5, sd = .9)
x6 <- rnorm(15, mean = 1.5, sd = 1.1)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = factor(rep(0:1, each = 45)) #trial number for plot coloring
)
ggplot(df, aes(x = Group, y = Outcome, color = Trial))
+ geom_point(alpha = .5)
# generate group labels
# A0 15 times, then B0 fiteen times, ... , A1 fiteen times, ... C1 fifteen times
Group <- rep(paste(LETTERS[1:3], rep(0:1, each=3), sep = '')
, each = 15)
# simulated H values
x1 <- rnorm(15, mean = 1, sd = 5)
x2 <- rnorm(15, mean = .5, sd = 4)
x3 <- rnorm(15, mean = 1.5, sd = 4.25)
x4 <- rnorm(15, mean = 1, sd = 1)
x5 <- rnorm(15, mean = .5, sd = .9)
x6 <- rnorm(15, mean = 1.5, sd = 1.1)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = factor(rep(0:1, each = 45)) #trial number for plot coloring
)
ggplot(df, aes(x = Group, y = Outcome, color = Trial))  +
geom_point(alpha = .5)
# simulated H values, setting a seed to ensure consistent outcome
set.seed(1123)
# generate group labels
# A0 15 times, then B0 fiteen times, ... , A1 fiteen times, ... C1 fifteen times
Group <- rep(paste(LETTERS[1:3], rep(0:1, each=3), sep = '')
, each = 15)
# simulated H values, setting a seed to ensure consistent outcome
set.seed(1123)
x1 <- rnorm(15, mean = 1, sd = 5)
x2 <- rnorm(15, mean = .5, sd = 4)
x3 <- rnorm(15, mean = 1.5, sd = 4.25)
x4 <- rnorm(15, mean = 1, sd = 1)
x5 <- rnorm(15, mean = .5, sd = .9)
x6 <- rnorm(15, mean = 1.5, sd = 1.1)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = factor(rep(0:1, each = 45)) #trial number for plot coloring
)
ggplot(df, aes(x = Group, y = Outcome, color = Trial))  +
geom_point(alpha = .5)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = factor(rep(0:1, each = 45))  #trial number for plot coloring
) %>% # reorder factors for approporiate visualization
mutate(fct_reorder(Trial, Group))
ggplot(df, aes(x = Group, y = Outcome, color = Trial))  +
geom_point(alpha = .5)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = factor(rep(0:1, each = 45))  #trial number for plot coloring
) %>% # reorder factors for approporiate visualization
mutate(Group = fct_reorder(Trial, Group))
ggplot(df, aes(x = Group, y = Outcome, color = Trial))  +
geom_point(alpha = .5)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = factor(rep(0:1, each = 45))  #trial number for plot coloring
) %>% # reorder factors for approporiate visualization
mutate(Group = fct_reorder(Group, Trial))
fct_reorder(Group, Trial)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = factor(rep(0:1, each = 45))  #trial number for plot coloring
) %>% # reorder factors for appropriate visualization
mutate(Group = fct_reorder(Group, Trial))
?fct_reorder
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = rep(0:1, each = 45)  #trial number for plot coloring
) %>% # reorder factors for appropriate visualization
mutate(Group = fct_reorder(Group, Trial))
ggplot(df, aes(x = Group, y = Outcome, color = Trial))  +
geom_point(alpha = .5)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = rep(0:1, each = 45)  #trial number for plot coloring
) %>% # reorder factors for appropriate visualization
mutate(Group = fct_reorder(Group, Trial)
, Trial = factor(Trial))
ggplot(df, aes(x = Group, y = Outcome, color = Trial))  +
geom_point(alpha = .5)
print(R.version)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("XML")
library(XML)
library(odbc)
install.packages("sqlmlutils")
tibble(
k = 1:5*5
, probOneTypeOne = 1 - .95^k
)
library(tidyverse)
tibble(
k = 1:5*5
, probOneTypeOne = 1 - .95^k
)
tibble(
k = 1:5*5
, probOneTypeOne = round(1 - .95^choose(k, 2), 4)
)
ggplot(df, aes(x = Group, y = Outcome, color = Trial)) +
geom_point()
ggplot(df, aes(x = Group, y = Outcome, color = Trial)) +
geom_point() +
geom_boxplot()
ggplot(df, aes(x = Group, y = Outcome, color = Trial)) +
geom_point() +
geom_violin()
ggplot(df, aes(x = Group, y = Outcome, color = Trial)) +
geom_point() +
geom_violin(alpha = .5)
ggplot(df, aes(x = Group, y = Outcome, color = Trial)) +
geom_point() +
geom_boxplot(alpha = .5)
bookdown::render_book()
