Group <- rep(paste(LETTERS[1:3], rep(0:1, each=3), sep = '')
, each = 15)
# simulated H values
x1 <- rnorm(15, mean = 1, sd = 5)
x2 <- rnorm(15, mean = .5, sd = 4)
x3 <- rnorm(15, mean = 1.5, sd = 4.25)
x4 <- rnorm(15, mean = 1, sd = 1)
x5 <- rnorm(15, mean = .5, sd = .9)
x6 <- rnorm(15, mean = 1.5, sd = 1.1)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = factor(rep(0:1, each = 45)) #trial number for plot coloring
)
ggplot(df, aes(x = Group, y = Outcome, color = Trial))  +
geom_point(alpha = .5)
# simulated H values, setting a seed to ensure consistent outcome
set.seed(1123)
# generate group labels
# A0 15 times, then B0 fiteen times, ... , A1 fiteen times, ... C1 fifteen times
Group <- rep(paste(LETTERS[1:3], rep(0:1, each=3), sep = '')
, each = 15)
# simulated H values, setting a seed to ensure consistent outcome
set.seed(1123)
x1 <- rnorm(15, mean = 1, sd = 5)
x2 <- rnorm(15, mean = .5, sd = 4)
x3 <- rnorm(15, mean = 1.5, sd = 4.25)
x4 <- rnorm(15, mean = 1, sd = 1)
x5 <- rnorm(15, mean = .5, sd = .9)
x6 <- rnorm(15, mean = 1.5, sd = 1.1)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = factor(rep(0:1, each = 45)) #trial number for plot coloring
)
ggplot(df, aes(x = Group, y = Outcome, color = Trial))  +
geom_point(alpha = .5)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = factor(rep(0:1, each = 45))  #trial number for plot coloring
) %>% # reorder factors for approporiate visualization
mutate(fct_reorder(Trial, Group))
ggplot(df, aes(x = Group, y = Outcome, color = Trial))  +
geom_point(alpha = .5)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = factor(rep(0:1, each = 45))  #trial number for plot coloring
) %>% # reorder factors for approporiate visualization
mutate(Group = fct_reorder(Trial, Group))
ggplot(df, aes(x = Group, y = Outcome, color = Trial))  +
geom_point(alpha = .5)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = factor(rep(0:1, each = 45))  #trial number for plot coloring
) %>% # reorder factors for approporiate visualization
mutate(Group = fct_reorder(Group, Trial))
fct_reorder(Group, Trial)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = factor(rep(0:1, each = 45))  #trial number for plot coloring
) %>% # reorder factors for appropriate visualization
mutate(Group = fct_reorder(Group, Trial))
?fct_reorder
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = rep(0:1, each = 45)  #trial number for plot coloring
) %>% # reorder factors for appropriate visualization
mutate(Group = fct_reorder(Group, Trial))
ggplot(df, aes(x = Group, y = Outcome, color = Trial))  +
geom_point(alpha = .5)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = rep(0:1, each = 45)  #trial number for plot coloring
) %>% # reorder factors for appropriate visualization
mutate(Group = fct_reorder(Group, Trial)
, Trial = factor(Trial))
ggplot(df, aes(x = Group, y = Outcome, color = Trial))  +
geom_point(alpha = .5)
print(R.version)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("XML")
library(XML)
library(odbc)
install.packages("sqlmlutils")
tibble(
k = 1:5*5
, probOneTypeOne = 1 - .95^k
)
library(tidyverse)
tibble(
k = 1:5*5
, probOneTypeOne = 1 - .95^k
)
tibble(
k = 1:5*5
, probOneTypeOne = round(1 - .95^choose(k, 2), 4)
)
ggplot(df, aes(x = Group, y = Outcome, color = Trial)) +
geom_point()
ggplot(df, aes(x = Group, y = Outcome, color = Trial)) +
geom_point() +
geom_boxplot()
ggplot(df, aes(x = Group, y = Outcome, color = Trial)) +
geom_point() +
geom_violin()
ggplot(df, aes(x = Group, y = Outcome, color = Trial)) +
geom_point() +
geom_violin(alpha = .5)
ggplot(df, aes(x = Group, y = Outcome, color = Trial)) +
geom_point() +
geom_boxplot(alpha = .5)
bookdown::render_book()
t <- (3.6 -  0)/(9.49365112929193 / sqrt(35))
t
2*pt(t, df = 35 - 1, lower.tail = FALSE)
library(BSDA)
?tsum.test
tsum.test(
mean.x = 3.6
, s.x = 9.49365112929193
, n.x = 35
, mu = 0
, alternative = "two.sided"
, conf.level = .95
)
SE <- sqrt(41.2^2/30 + 25^2 /30)
SE <- sqrt(42.2^2/30 + 25^2 /30)
t <- (52.3-26)/SE
t
2*pt(t, df = 29, lower.tail = FALSE)
tsum.test(
mean.x = 52.3
, s.x = 42.2
, n.x = 30
, mean.y = 26
, s.y = 25
, n.y = 30
, mu = 0
, alternative = "two.sided"
, conf.level = .96
, var.equal = FALSE
)
?aov
?anova
letters
LETTERS
LETTERS[1:5]
c("A", "B", "C", "D", "E")
LETTERS[2:10]
LETTERS[1:5]
rep( LETTERS[1:5], each = 10)
rep( LETTERS[1:5], each = 4)
df <- data.frame(
strain = rep( LETTERS[1:5], each = 4)
, growth = c(13,13,8,10,21,15,28,30,20,23,25,21,13,15,14,12,12,12,7)
)
df <- data.frame(
strain = rep( LETTERS[1:5], each = 4)
, growth = c(13,13,8,10,21,15,28,30,20,23,25,21,13,15,15,14,12,12,12,7)
)
df
model <- aov( growth ~ strain, data = df)
model
model$coefficients
model$residuals
model$effects
model$df.residual
model$xlevels
model$terms
summary(model)
mean(df$growth)
4*( (11- 16.35)^2 + (23.5- 16.35)^2 + (22.25- 16.35)^2+ (14.25- 16.35)^2 + (10.75- 16.35)^2 )
?BSDA
??BSDA
library(stringr)
df0 <- df %>%
filter(str_detect(Group, "0"))
# generate group labels
# A0 15 times, then B0 fiteen times, ... , A1 fiteen times, ... C1 fifteen times
Group <- rep(paste(LETTERS[1:3], rep(0:1, each=3), sep = '')
, each = 15)
# simulated H values, setting a seed to ensure consistent outcome
set.seed(1123)
x1 <- rnorm(15, mean = 1, sd = 5)
x2 <- rnorm(15, mean = .5, sd = 4)
x3 <- rnorm(15, mean = 1.5, sd = 4.25)
x4 <- rnorm(15, mean = 1, sd = 1)
x5 <- rnorm(15, mean = .5, sd = .9)
x6 <- rnorm(15, mean = 1.5, sd = 1.1)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = rep(0:1, each = 45)  #trial number for plot coloring
) %>% # reorder factors for appropriate visualization
mutate(Group = fct_reorder(Group, Trial)
, Trial = factor(Trial))
library(tidyverse)
# generate group labels
# A0 15 times, then B0 fiteen times, ... , A1 fiteen times, ... C1 fifteen times
Group <- rep(paste(LETTERS[1:3], rep(0:1, each=3), sep = '')
, each = 15)
# simulated H values, setting a seed to ensure consistent outcome
set.seed(1123)
x1 <- rnorm(15, mean = 1, sd = 5)
x2 <- rnorm(15, mean = .5, sd = 4)
x3 <- rnorm(15, mean = 1.5, sd = 4.25)
x4 <- rnorm(15, mean = 1, sd = 1)
x5 <- rnorm(15, mean = .5, sd = .9)
x6 <- rnorm(15, mean = 1.5, sd = 1.1)
# make simulated date set
df <- tibble(Group = Group
, Outcome = c(x1,x2,x3,x4,x5,x6)
, Trial = rep(0:1, each = 45)  #trial number for plot coloring
) %>% # reorder factors for appropriate visualization
mutate(Group = fct_reorder(Group, Trial)
, Trial = factor(Trial))
ggplot(df, aes(x = Group, y = Outcome, color = Trial))  +
geom_point(alpha = .5) +
labs(title = "Experiment outcomes for two different trials")
ggplot(df, aes(x = Group, y = Outcome, color = Trial)) +
geom_point() +
geom_boxplot(alpha = .5)
df0 <- df %>%
filter(str_detect(Group, "0"))
view(df0)
df0 <- df %>%
filter(Trial == 0 )
view(df0)
df1 <- df %>%
filter(Trial == 1)
#find grand means
gm0 <- mean(df0$Outcome)
gm1 <- mean(df1$Outcome)
summary0
#create summary tables that find all of our needed summary statistics
summary0 <- df0 %>%
group_by(Group) %>%
summarize(
n = n()
, xBar = mean(Outcome)
, s = sd(Outcome)
, s2 = var(Outcome)
)
summary0
summary1
summary1 <- df1 %>%
group_by(Group) %>%
summarize(
n = n()
, xBar = mean(Outcome)
, s = sd(Outcome)
, s2 = var(Outcome)
)
summary1
SSG0 <- sum( summary0$n*(summary0 - gm0)^2)
SSG0 <- sum( summary0$n*(summary0$xBar - gm0)^2)
summary(aov(Outcome ~ group, data = df0))
summary(aov(Outcome ~ Group, data = df0))
summary(aov(Outcome ~ Group, data = df1))
SSG0
SSG1
SSG1 <- sum( summary1$n*(summary1$xBar - gm0)^2)
SSG1
SSG1 <- sum( summary1$n*(summary1$xBar - gm1)^2)
c(MSG0, MSG1)
#find MSG then print
MSG0 <- SSG0/(k-1)
MSG1 <- SSG1/(k-1)
SSG1 <- sum( summary1$n*(summary1$xBar - gm1)^2)
#print values
c(SSG0, SSG1)
#find MSG then print
MSG0 <- SSG0/(k-1)
MSG1 <- SSG1/(k-1)
n <- dim(df0)[1] #number of rows in df0 - the same for trial 1
k <- length(unique(df0$Group)) # of groups in df0 - the same for trial 1
#find MSG then print
MSG0 <- SSG0/(k-1)
MSG1 <- SSG1/(k-1)
c(MSG0, MSG1)
SSE0 <- sum( (summary0$n- 1)*summary0$s2 )
SSE1 <- sum( (summary1$n- 1)*summary1$s2 )
c(SSE0, SSE1)
summary(aov(Outcome ~ Group, data = df1))
summary(aov(Outcome ~ Group, data = df0))
c(MSE0, MSE1)
# calc and store MSE
MSE0 <- SSE0/(n  - k)
MSE1 <- SSE1/ (n-k)
c(MSE0, MSE1)
c(F0, F1)
# F stats
F0 <- MSG0/MSE0
F1 <- MSG1/MSE1
c(F0, F1)
?pf
#calculate and store p-values
p0 <- pf(F0, df1 = k -1, df2 = n -k, lower.tail =  FALSE)
p1 <- pf(F1, df1 = k -1, df2 = n -k, lower.tail =  FALSE)
c(p0, p1)
bookdown::render_book()
df <- data.frame(
"A" = 1:5
, "B" = 2*A
, "C" = 3*A
)
df <- data.frame(
"A" = 1:5
, "B" = 2*1:5
, "C" = 3*1:5
)
1:5
2*1:5
3*1:5
view(df)
library(tidyverse)
view(df)
rep( c("A", "B", "C"), each = 5)
rep( c("A", "B", "C"), 5)
rep( c("A", "B", "C"), each = 5)
dfTidy <- data.frame(
Letter = rep( c("A", "B", "C"), each = 5)
, Measure = c( 1:5, 2*1:5, 3*1:5)
)
aov(Measure ~ Letter, data = dfTidy)
summary(aov(Measure ~ Letter, data = dfTidy))
df %>%
pivot_longer()
?pivot_longer
df %>%
pivot_longer(cols = c("A", "B", "C"))
df %>%
pivot_longer(cols = c("A", "B", "C")) %>%
view()
df %>%
pivot_longer(cols = c("A", "B", "C")) %>%
arrange(name, value)
df %>%
pivot_longer(cols = c("A", "B", "C")) %>%
arrange(name, value) %>%
view()
df2 <- df %>%
pivot_longer(cols = c("A", "B", "C"))
summary(aov(value ~ name, data = df2))
mean(df$A)
mean(df$B)
mean(df$C)
mean(df)
mean(c(df$A, df$B, df$C))
mean(as.matrix(df))
#variance of column
var(df$C)
length(df)
product(dim(df))
prod(dim(df))
dim(df)
sumDF <- df2 %>%
group_by(name) %>%
summarize(
n = n() # counts observations in each group
, xBar = mean(value)
, var = var(value)
)
sumDF
#grand mean
mean(as.matrix(df))
grandMean <- sumDF$n*sumDF$xBar / sum(sumDF$n)
grandMean
grandMean <- sum(sumDF$n*sumDF$xBar) / sum(sumDF$n)
grandMean
sum(sumDF$n*(sumDF$xBar - grandMean)^2)
MSG <- SSG /(3-1)
SSG <- sum(sumDF$n*(sumDF$xBar - grandMean)^2)
MSG <- SSG /(3-1)
sum((sumDF$n - 1)*sumDF$var)
SSE <- sum((sumDF$n - 1)*sumDF$var)
MSE <- SSE / (sum(sumDF$n) - 3)
f <- MSG / MSE
f
pf(f, df1 = 3-1, df2 = 15-3, lower.tail = FALSE)
summary(aov(Measure ~ Letter, data = dfTidy))
SSG
SSE
MSG
MSE
140/12
f
180*.18
(190 - 180*.18)
(180 - 180*.18)
180*.06/.12
180*.18/270
180*.18
32.4/.12
32.4/.15
(32.4 -10)/.15
(32.4 -5)/.15
(32.4 -5)/.12
(32.4 -10)/.12
.12*175
32.4 -21
(32.4 -11.4)/.12
180-11.4
175-(180-11.4)
(32.4 -5 )/180
(32.4 -5 )/175
result <- prop.test(
x = 110 # the NUMBER of successes
, n = 200 # sample size
, p = .5 # the null proportion
, alternative = "greater" # ONLY CHANGE FROM Above
, conf.level = .95
, correct = FALSE
)
result
z.crit <- qnorm(.05, lower.tail = F)
pHat - z.crit*null.SE
result <- prop.test(
x = 110 # the NUMBER of successes
, n = 200 # sample size
, p = .5 # the null proportion
, alternative = "two.sided" # since we're doing a two-sided hypothesis test
, conf.level = .95
, correct = FALSE
)
result
n <- 200
pHat <- 110/200
null.SE <- sqrt(.5*.5/200)
p.value.hand <- 2*pnorm(pHat, mean = .5, sd = null.SE, lower.tail = FALSE)
c(p.value.hand, result$p.value)
conf.int.hand <- pHat + c(-1,1)*1.96*null.SE
# our result
conf.int.hand
#from prop.test
result$conf.in
result <- prop.test(
x = 110 # the NUMBER of successes
, n = 200 # sample size
, p = .5 # the null proportion
, alternative = "less" # ONLY CHANGE FROM Above
, conf.level = .95
, correct = FALSE
)
result
z.crit <- qnorm(.05, lower.tail = F)
pHat + z.crit*null.SE
result <- prop.test(
x = 110 # the NUMBER of successes
, n = 200 # sample size
, p = .5 # the null proportion
, alternative = "greater" # ONLY CHANGE FROM Above
, conf.level = .95
, correct = FALSE
)
result
z.crit <- qnorm(.05, lower.tail = F)
pHat - z.crit*null.SE
bookdown::render_book()
9000/12 -10
return( (GoalGPA*(TermCredits +CumCredits) - CurrentGPA*CumCredit)/TermCredits)
GoalTermGPA <- function(CurrentGPA, GoalGPA, CumCredits, TermCredits){
return( (GoalGPA*(TermCredits +CumCredits) - CurrentGPA*CumCredit)/TermCredits)
}
GoalTermGPA(0, 4, 0, 15)
return( (GoalGPA*(TermCredits +CumCredits) - CurrentGPA*CumCredits)/TermCredits)
GoalTermGPA <- function(CurrentGPA, GoalGPA, CumCredits, TermCredits){
return( (GoalGPA*(TermCredits +CumCredits) - CurrentGPA*CumCredits)/TermCredits)
}
GoalTermGPA(0, 4, 0, 15)
GoalTermGPA(3.0, 3.5, 15, 15)
GoalTermGPA(CurrentGPA = 3.0, GoalGPA = 3.5, CumCredits = 15,  TermCredits = 15)
GoalTermGPA <- function(CurrentGPA, GoalGPA, CumCredits, TermCredits){
MinTermGPA <- (GoalGPA*(TermCredits +CumCredits) - CurrentGPA*CumCredits)/TermCredits
if(MinTermGPA <= 4.0 AND MinTermGPA >= 0){
if(MinTermGPA <= 4.0 & MinTermGPA >= 0){
return(MinTermGPA)
}else{
return('Impossible!')
}
GoalTermGPA <- function(CurrentGPA, GoalGPA, CumCredits, TermCredits){
MinTermGPA <- (GoalGPA*(TermCredits +CumCredits) - CurrentGPA*CumCredits)/TermCredits
if(MinTermGPA <= 4.0 & MinTermGPA >= 0){
return(MinTermGPA)
}else{
return('Impossible!')
}
}
GoalTermGPA(CurrentGPA = 3.0, GoalGPA = 3.5, CumCredits = 15,  TermCredits = 15)
GoalTermGPA(CurrentGPA = 3.0, GoalGPA = 4, CumCredits = 15,  TermCredits = 15)
# Student has imperfect GPA, should always be impossible to get a 4.0
GoalTermGPA(CurrentGPA = 3.5, GoalGPA = 4.0, CumCredits = 24, TermCredits = 15)
# Student has perfect GPA and 'wants' a 1.0 with 60 cum credits and 15 term credits
GoalTermGPA(CurrentGPA = 4.0, GOalGPA = 1.0, CumCredits = 60, TermCredits = 15)
# Student has perfect GPA and 'wants' a 1.0 with 60 cum credits and 15 term credits
GoalTermGPA(CurrentGPA = 4.0, GoalGPA = 1.0, CumCredits = 60, TermCredits = 15)
matrix(rnorm(21), nrows = 7, ncols = 3)
m<-matrix(rnorm(21), nrow = 7, ncol = 3)
m
m[1,1]
m[,1]
m[,6]
m[,c(1,3)]
4:5
m[, 2:3]
